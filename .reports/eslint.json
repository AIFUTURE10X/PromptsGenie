[{"filePath":"C:\\PromptsGenie\\src\\App.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\App.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isGenerating' is assigned a value but never used.","line":30,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":30,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'clearSubjectAnalysis' is assigned a value but never used.","line":64,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleImageFiles' is assigned a value but never used.","line":82,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":82,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleStyleFile' is assigned a value but never used.","line":88,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":88,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleSceneFile' is assigned a value but never used.","line":89,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":89,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9465,9468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9465,9468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'cleanedResponse' is never reassigned. Use 'const' instead.","line":271,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":271,"endColumn":28,"fix":{"range":[11932,12142],"text":"const cleanedResponse = response\r\n          .replace(/^(Subject:|Person:|Character:|Main subject:)\\s*/i, '') // Remove subject prefixes\r\n          .replace(/\\s+/g, ' ') // Normalize whitespace\r\n          .trim();"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":278,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12294,12297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12294,12297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'cleanedResponse' is never reassigned. Use 'const' instead.","line":332,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":332,"endColumn":28,"fix":{"range":[14809,15016],"text":"const cleanedResponse = response\r\n          .replace(/^(Scene:|Setting:|Environment:|Background:)\\s*/i, '') // Remove scene prefixes\r\n          .replace(/\\s+/g, ' ') // Normalize whitespace\r\n          .trim();"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":339,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":339,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15164,15167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15164,15167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'cleanedResponse' is never reassigned. Use 'const' instead.","line":393,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":393,"endColumn":28,"fix":{"range":[17675,17878],"text":"const cleanedResponse = response\r\n          .replace(/^(Style:|Visual Style:|Artistic Style:)\\s*/i, '') // Remove style prefixes\r\n          .replace(/\\s+/g, ' ') // Normalize whitespace\r\n          .trim();"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":400,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":400,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18026,18029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18026,18029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":469,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":469,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20997,21000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20997,21000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'cleanedResponse' is never reassigned. Use 'const' instead.","line":535,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":535,"endColumn":28,"fix":{"range":[23846,24054],"text":"const cleanedResponse = response\r\n          .replace(/^(Subject:|Main Subject:|People:|Objects:)\\s*/i, '') // Remove subject prefixes\r\n          .replace(/\\s+/g, ' ') // Normalize whitespace\r\n          .trim();"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":544,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":544,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24244,24247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24244,24247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'cleanedResponse' is never reassigned. Use 'const' instead.","line":614,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":614,"endColumn":28,"fix":{"range":[27246,27453],"text":"const cleanedResponse = response\r\n          .replace(/^(Scene:|Setting:|Environment:|Background:)\\s*/i, '') // Remove scene prefixes\r\n          .replace(/\\s+/g, ' ') // Normalize whitespace\r\n          .trim();"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":623,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":623,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27639,27642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27639,27642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'cleanedResponse' is never reassigned. Use 'const' instead.","line":693,"column":13,"nodeType":"Identifier","messageId":"useConst","endLine":693,"endColumn":28,"fix":{"range":[30619,30822],"text":"const cleanedResponse = response\r\n          .replace(/^(Style:|Visual Style:|Artistic Style:)\\s*/i, '') // Remove style prefixes\r\n          .replace(/\\s+/g, ' ') // Normalize whitespace\r\n          .trim();"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":702,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":702,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[31008,31011],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[31008,31011],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":857,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":857,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[36827,36830],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[36827,36830],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'testApiKey' is assigned a value but never used.","line":875,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":875,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'apiKey' is defined but never used. Allowed unused args must match /^_/u.","line":875,"column":29,"nodeType":"Identifier","messageId":"unusedVar","endLine":875,"endColumn":43},{"ruleId":"prefer-const","severity":2,"message":"'cleanedResponse' is never reassigned. Use 'const' instead.","line":961,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":961,"endColumn":26,"fix":{"range":[41318,41520],"text":"const cleanedResponse = response\r\n        .replace(/^(Subject:|Main Subject:|People:|Objects:)\\s*/i, '') // Remove subject prefixes\r\n        .replace(/\\s+/g, ' ') // Normalize whitespace\r\n        .trim();"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":969,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":969,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[41708,41711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[41708,41711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'cleanedResponse' is never reassigned. Use 'const' instead.","line":1026,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":1026,"endColumn":26,"fix":{"range":[44465,44666],"text":"const cleanedResponse = response\r\n        .replace(/^(Scene:|Setting:|Environment:|Background:)\\s*/i, '') // Remove scene prefixes\r\n        .replace(/\\s+/g, ' ') // Normalize whitespace\r\n        .trim();"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1033,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1033,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[44798,44801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[44798,44801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-const","severity":2,"message":"'cleanedResponse' is never reassigned. Use 'const' instead.","line":1088,"column":11,"nodeType":"Identifier","messageId":"useConst","endLine":1088,"endColumn":26,"fix":{"range":[47230,47427],"text":"const cleanedResponse = response\r\n        .replace(/^(Style:|Visual Style:|Artistic Style:)\\s*/i, '') // Remove style prefixes\r\n        .replace(/\\s+/g, ' ') // Normalize whitespace\r\n        .trim();"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1096,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1096,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[47567,47570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[47567,47570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":9,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from \"react\";\r\nimport DM2PromptEditor from \"./components/DM2PromptEditor\";\r\nimport CurrentPromptPanel from \"./components/CurrentPromptPanel\";\r\nimport ImageDropZone from \"./components/ImageDropZone\";\r\nimport { analyzeImage, textToPrompt, refinePrompt } from \"./services/gemini\";\r\nimport { generateWithImagesREST } from \"./helpers/gemini\";\r\nimport BackgroundCanvas from \"./components/BackgroundCanvas\";\r\nimport BrandHeader from \"./components/BrandHeader\";\r\nimport { composePrompt } from \"./lib/utils\";\r\n\r\n// Helper function to convert files to data URLs\r\nconst getImageDataUrls = async (files: File[]): Promise<string[]> => {\r\n  const promises = files.map(file => {\r\n    return new Promise<string>((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.readAsDataURL(file);\r\n      reader.onload = () => resolve(reader.result as string);\r\n      reader.onerror = error => reject(error);\r\n    });\r\n  });\r\n  return Promise.all(promises);\r\n};\r\n\r\n// Local type to coordinate speed across components\r\ntype SpeedMode = 'Fast' | 'Quality';\r\n\r\nfunction App() {\r\n  const [prompt, setPrompt] = useState(\"\");\r\n  const [editorSeed, setEditorSeed] = useState<string>(\"\");\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  const [images, setImages] = useState<File[]>([]);\r\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\r\n  const [autoAnalyze, setAutoAnalyze] = useState(true);\r\n  const [editorExpanded, setEditorExpanded] = useState(false);\r\n  const [lastSource, setLastSource] = useState<\"edge\" | \"gemini-mm\" | \"gemini-text\" | \"subject\" | \"scene\" | \"style\" | undefined>(undefined);\r\n  \r\n  // Debug logging for state changes\r\n  useEffect(() => {\r\n    console.log(\"🔄 Prompt state changed:\", prompt ? `\"${prompt.substring(0, 50)}...\"` : \"EMPTY\");\r\n  }, [prompt]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"🔄 LastSource state changed:\", lastSource);\r\n  }, [lastSource]);\r\n  const [speedMode, setSpeedMode] = useState<SpeedMode>('Fast');\r\n  \r\n  // State for independent image analysis\r\n  const [subjectImages, setSubjectImages] = useState<File[]>([]);\r\n  const [sceneImages, setSceneImages] = useState<File[]>([]);\r\n  const [styleImages, setStyleImages] = useState<File[]>([]);\r\n  const [isAnalyzingSubject, setIsAnalyzingSubject] = useState(false);\r\n  const [isAnalyzingScene, setIsAnalyzingScene] = useState(false);\r\n  const [isAnalyzingStyle, setIsAnalyzingStyle] = useState(false);\r\n  const [autoAnalyzeSubject, setAutoAnalyzeSubject] = useState(true);\r\n  const [autoAnalyzeScene, setAutoAnalyzeScene] = useState(true);\r\n  const [autoAnalyzeStyle, setAutoAnalyzeStyle] = useState(true);\r\n  \r\n  // Store individual analysis results\r\n  const [subjectAnalysis, setSubjectAnalysis] = useState<string>('');\r\n  const [sceneAnalysis, setSceneAnalysis] = useState<string>('');\r\n  const [styleAnalysis, setStyleAnalysis] = useState<string>('');\r\n\r\n  // Debug function to clear subject analysis\r\n  const clearSubjectAnalysis = () => {\r\n    console.log(\"🧹 Clearing subject analysis state\");\r\n    setSubjectAnalysis('');\r\n  };\r\n  \r\n  // Toggle states for using style/scene descriptors\r\n  const [useStyle, setUseStyle] = useState<boolean>(true);\r\n  const [useScene, setUseScene] = useState<boolean>(true);\r\n  const [isSimpleStyleActive, setIsSimpleStyleActive] = useState<boolean>(false);\r\n  const [originalPromptBeforeSimple, setOriginalPromptBeforeSimple] = useState<string>('');\r\n  \r\n  // Preview states for image thumbnails\r\n  const [subjectPreview, setSubjectPreview] = useState<string | undefined>(undefined);\r\n  const [scenePreview, setScenePreview] = useState<string | undefined>(undefined);\r\n  const [stylePreview, setStylePreview] = useState<string | undefined>(undefined);\r\n\r\n\r\n\r\n  const handleImageFiles = async (files: File[]) => {\r\n    if (!files) return;\r\n    setImages(files);\r\n  };\r\n\r\n  // New: role handlers wired to ImageDropZone\r\n  const handleStyleFile = (file?: File) => setStyleFile(file);\r\n  const handleSceneFile = (file?: File) => setSceneFile(file);\r\n\r\n  const handleSend = async (finalPrompt: string) => {\r\n    console.log(\"🚀🚀🚀 HANDLE SEND TRIGGERED! 🚀🚀🚀\");\r\n    console.log(\"🚀 handleSend called with prompt:\", finalPrompt.substring(0, 100) + (finalPrompt.length > 100 ? \"...\" : \"\"));\r\n    console.log(\"🚀 Current images count:\", images.length);\r\n    console.log(\"🚀 Analysis states:\", { subjectAnalysis, styleAnalysis, sceneAnalysis, useStyle, useScene });\r\n    setIsGenerating(true);\r\n    \r\n    try {\r\n      // Compose prompt with optional style/scene descriptors and subject analysis\r\n      const composed = composePrompt({\r\n        userText: finalPrompt,\r\n        contentSummary: subjectAnalysis,\r\n        style: styleAnalysis,\r\n        scene: sceneAnalysis,\r\n        useStyle,\r\n        useScene,\r\n      });\r\n      console.log(\"🚀 Composed prompt:\", composed);\r\n      console.log(\"🚀 Composed prompt length:\", composed.length);\r\n\r\n      if (images.length > 0) {\r\n        console.log(\"🚀 Taking IMAGE path - analyzing with Gemini Vision\");\r\n        // For now, just use the first image for analysis and generate a prompt\r\n        const result = await analyzeImage(images[0], { \r\n          detail: speedMode === 'Quality' ? 'detailed' : 'medium',\r\n          tags: true \r\n        });\r\n        \r\n        console.log(\"🔍 Image analysis result:\", result);\r\n        \r\n        const promptInput = `${composed}. Based on this image: ${result.description}`;\r\n        console.log(\"📝 About to call textToPrompt with:\", promptInput);\r\n        \r\n        // Generate an enhanced prompt based on the image analysis\r\n        const enhancedPrompt = await textToPrompt(\r\n          promptInput,\r\n          undefined,\r\n          speedMode === 'Quality' ? 'high detail, professional quality' : 'good quality'\r\n        );\r\n        \r\n        console.log(\"✅ Enhanced prompt generated:\", enhancedPrompt);\r\n        setPrompt(enhancedPrompt);\r\n        setEditorSeed(enhancedPrompt);\r\n        setLastSource(\"gemini-mm\");\r\n      } else {\r\n        console.log(\"🚀 Taking TEXT-ONLY path - generating with Gemini\");\r\n        const result = await textToPrompt(composed);\r\n        console.log(\"🚀 Text generation result:\", result.substring(0, 100) + (result.length > 100 ? \"...\" : \"\"));\r\n        setPrompt(result);\r\n        setEditorSeed(result);\r\n        setLastSource(\"gemini-text\");\r\n      }\r\n    } catch (err2) {\r\n      console.error(\"Gemini call failed:\", err2);\r\n      console.error(\"Error details:\", {\r\n        message: err2.message,\r\n        stack: err2.stack,\r\n        name: err2.name\r\n      });\r\n      \r\n      // More specific error messages\r\n      let errorMessage = \"An error occurred while generating. Please try again.\";\r\n      if (err2.message?.includes('API key')) {\r\n        errorMessage = \"API key error: Please check your VITE_GOOGLE_API_KEY environment variable.\";\r\n      } else if (err2.message?.includes('quota') || err2.message?.includes('429')) {\r\n        errorMessage = \"API quota exceeded: You've hit your Gemini API limit. Please wait and try again later.\";\r\n      } else if (err2.message?.includes('401') || err2.message?.includes('403')) {\r\n        errorMessage = \"Authentication error: Please check your API key permissions.\";\r\n      }\r\n      \r\n      alert(errorMessage);\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  const handleReanalyze = async () => {\r\n    console.log(\"🔄 Reanalyze triggered\");\r\n    \r\n    // Reanalyze main images if they exist\r\n    if (images.length > 0) {\r\n      setIsAnalyzing(true);\r\n      try {\r\n        // Convert image to data URL for Gemini API\r\n        const imageDataUrls = await getImageDataUrls(images);\r\n        if (imageDataUrls.length === 0) {\r\n          throw new Error(\"Failed to process image\");\r\n        }\r\n\r\n        // Get API key and model\r\n        const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\r\n        if (!apiKey) {\r\n          throw new Error(\"Gemini API key not found\");\r\n        }\r\n\r\n        const model = speedMode === 'Quality' ? 'gemini-2.5-pro' : 'gemini-2.5-flash';\r\n\r\n        // Define generation config based on speed mode\r\n        const generationConfig = speedMode === 'Quality'\r\n          ? { temperature: 0.4, topP: 0.8, topK: 40, maxOutputTokens: 2048 }\r\n          : { temperature: 0.7, topP: 0.9, topK: 40, maxOutputTokens: 1024 };\r\n\r\n        // Create comprehensive analysis prompt\r\n        const analysisPrompt = speedMode === 'Quality'\r\n          ? \"Analyze this image comprehensively and describe what you see. Include details about the subject, setting, composition, colors, lighting, style, and any notable elements. Provide a detailed description suitable for creating image generation prompts.\"\r\n          : \"Describe this image in detail, including the subject, setting, colors, and style.\";\r\n\r\n        // Call Gemini API\r\n        const response = await generateWithImagesREST({\r\n          apiKey,\r\n          model,\r\n          text: analysisPrompt,\r\n          imageDataUrls,\r\n          generationConfig\r\n        });\r\n\r\n        // Generate a prompt based on the analysis\r\n        const generatedPrompt = await textToPrompt(\r\n          `Create an image generation prompt based on this analysis: ${response}`,\r\n          undefined,\r\n          speedMode === 'Quality' ? 'high detail, professional quality' : 'good quality'\r\n        );\r\n        \r\n        setPrompt(generatedPrompt);\r\n        setEditorSeed(generatedPrompt);\r\n        setLastSource(\"gemini-mm\");\r\n      } catch (error: any) {\r\n        console.error(\"Reanalyze main images failed:\", error);\r\n        \r\n        // Handle specific API errors\r\n        if (error.message?.includes('429') || error.message?.includes('rate limit')) {\r\n          console.error(\"Rate limit exceeded. Please try again later.\");\r\n        } else if (error.message?.includes('401') || error.message?.includes('authentication')) {\r\n          console.error(\"Authentication failed. Please check your API key.\");\r\n        } else if (error.message?.includes('403') || error.message?.includes('forbidden')) {\r\n          console.error(\"Access forbidden. Please check your API permissions.\");\r\n        }\r\n      } finally {\r\n        setIsAnalyzing(false);\r\n      }\r\n    }\r\n\r\n    // Reanalyze subject images if they exist\r\n    if (subjectImages.length > 0) {\r\n      setIsAnalyzingSubject(true);\r\n      try {\r\n        // Convert image to data URL for Gemini API\r\n        const imageDataUrls = await getImageDataUrls(subjectImages);\r\n        if (imageDataUrls.length === 0) {\r\n          throw new Error(\"Failed to process image\");\r\n        }\r\n\r\n        // Get API key and model\r\n        const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\r\n        if (!apiKey) {\r\n          throw new Error(\"Gemini API key not found\");\r\n        }\r\n\r\n        const model = speedMode === 'Quality' ? 'gemini-2.5-pro' : 'gemini-2.5-flash';\r\n\r\n        // Define generation config based on speed mode\r\n        const generationConfig = speedMode === 'Quality'\r\n          ? { temperature: 0.4, topP: 0.8, topK: 40, maxOutputTokens: 2048 }\r\n          : { temperature: 0.7, topP: 0.9, topK: 40, maxOutputTokens: 1024 };\r\n\r\n        // Create focused subject analysis prompt\r\n        const subjectPrompt = speedMode === 'Quality'\r\n          ? \"Analyze and describe the main subject(s) in this image. Focus on: people, animals, objects, their appearance, clothing, poses, expressions, and physical characteristics. Provide a detailed description suitable for image generation prompts. Do NOT describe the background, setting, or artistic style.\"\r\n          : \"Describe the main subject or person in this image. Focus on their appearance, clothing, and pose, not the background or style.\";\r\n\r\n        // Call Gemini API\r\n        const response = await generateWithImagesREST({\r\n          apiKey,\r\n          model,\r\n          text: subjectPrompt,\r\n          imageDataUrls,\r\n          generationConfig\r\n        });\r\n\r\n        // Clean up the response\r\n        let cleanedResponse = response\r\n          .replace(/^(Subject:|Person:|Character:|Main subject:)\\s*/i, '') // Remove subject prefixes\r\n          .replace(/\\s+/g, ' ') // Normalize whitespace\r\n          .trim();\r\n        \r\n        console.log(\"👤 Subject reanalysis result:\", cleanedResponse);\r\n        setSubjectAnalysis(cleanedResponse);\r\n      } catch (error: any) {\r\n        console.error(\"Reanalyze subject failed:\", error);\r\n        \r\n        // Handle specific API errors\r\n        if (error.message?.includes('429') || error.message?.includes('rate limit')) {\r\n          console.error(\"Rate limit exceeded. Please try again later.\");\r\n        } else if (error.message?.includes('401') || error.message?.includes('authentication')) {\r\n          console.error(\"Authentication failed. Please check your API key.\");\r\n        } else if (error.message?.includes('403') || error.message?.includes('forbidden')) {\r\n          console.error(\"Access forbidden. Please check your API permissions.\");\r\n        }\r\n      } finally {\r\n        setIsAnalyzingSubject(false);\r\n      }\r\n    }\r\n\r\n    // Reanalyze scene images if they exist\r\n    if (sceneImages.length > 0) {\r\n      setIsAnalyzingScene(true);\r\n      try {\r\n        // Convert image to data URL for Gemini API\r\n        const imageDataUrls = await getImageDataUrls(sceneImages);\r\n        if (imageDataUrls.length === 0) {\r\n          throw new Error(\"Failed to process image\");\r\n        }\r\n\r\n        // Get API key and model\r\n        const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\r\n        if (!apiKey) {\r\n          throw new Error(\"Gemini API key not found\");\r\n        }\r\n\r\n        const model = speedMode === 'Quality' ? 'gemini-2.5-pro' : 'gemini-2.5-flash';\r\n\r\n        // Define generation config based on speed mode\r\n        const generationConfig = speedMode === 'Quality'\r\n          ? { temperature: 0.4, topP: 0.8, topK: 40, maxOutputTokens: 2048 }\r\n          : { temperature: 0.7, topP: 0.9, topK: 40, maxOutputTokens: 1024 };\r\n\r\n        // Create focused scene analysis prompt\r\n        const scenePrompt = speedMode === 'Quality'\r\n          ? \"Analyze and describe the setting, environment, and background of this image. Focus on: location/setting, architecture, landscape, weather/time of day, environmental details, spatial composition, and contextual elements. Provide a detailed description suitable for image generation prompts. Do NOT describe the people, objects, or artistic style.\"\r\n          : \"Describe the setting, location, and environment in this image. Focus on the background, architecture, and setting, not the people or style.\";\r\n\r\n        // Call Gemini API\r\n        const response = await generateWithImagesREST({\r\n          apiKey,\r\n          model,\r\n          text: scenePrompt,\r\n          imageDataUrls,\r\n          generationConfig\r\n        });\r\n\r\n        // Clean up the response\r\n        let cleanedResponse = response\r\n          .replace(/^(Scene:|Setting:|Environment:|Background:)\\s*/i, '') // Remove scene prefixes\r\n          .replace(/\\s+/g, ' ') // Normalize whitespace\r\n          .trim();\r\n        \r\n        console.log(\"🔍 Scene reanalysis result:\", cleanedResponse);\r\n        setSceneAnalysis(cleanedResponse);\r\n      } catch (error: any) {\r\n        console.error(\"Reanalyze scene failed:\", error);\r\n        \r\n        // Handle specific API errors\r\n        if (error.message?.includes('429') || error.message?.includes('rate limit')) {\r\n          console.error(\"Rate limit exceeded. Please try again later.\");\r\n        } else if (error.message?.includes('401') || error.message?.includes('authentication')) {\r\n          console.error(\"Authentication failed. Please check your API key.\");\r\n        } else if (error.message?.includes('403') || error.message?.includes('forbidden')) {\r\n          console.error(\"Access forbidden. Please check your API permissions.\");\r\n        }\r\n      } finally {\r\n        setIsAnalyzingScene(false);\r\n      }\r\n    }\r\n\r\n    // Reanalyze style images if they exist\r\n    if (styleImages.length > 0) {\r\n      setIsAnalyzingStyle(true);\r\n      try {\r\n        // Convert image to data URL for Gemini API\r\n        const imageDataUrls = await getImageDataUrls(styleImages);\r\n        if (imageDataUrls.length === 0) {\r\n          throw new Error(\"Failed to process image\");\r\n        }\r\n\r\n        // Get API key and model\r\n        const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\r\n        if (!apiKey) {\r\n          throw new Error(\"Gemini API key not found\");\r\n        }\r\n\r\n        const model = speedMode === 'Quality' ? 'gemini-2.5-pro' : 'gemini-2.5-flash';\r\n\r\n        // Define generation config based on speed mode\r\n        const generationConfig = speedMode === 'Quality'\r\n          ? { temperature: 0.4, topP: 0.8, topK: 40, maxOutputTokens: 2048 }\r\n          : { temperature: 0.7, topP: 0.9, topK: 40, maxOutputTokens: 1024 };\r\n\r\n        // Create focused style analysis prompt\r\n        const stylePrompt = speedMode === 'Quality'\r\n          ? \"Analyze the artistic style, visual treatment, composition, and aesthetic approach of this image. Focus on: lighting style, color palette, mood/atmosphere, artistic technique, visual composition, and overall aesthetic treatment. Provide a concise but detailed description suitable for image generation prompts. Do NOT describe the subject or people in the image.\"\r\n          : \"Describe the visual style, lighting, colors, and artistic approach of this image. Focus on style elements, not the subject.\";\r\n\r\n        // Call Gemini API\r\n        const response = await generateWithImagesREST({\r\n          apiKey,\r\n          model,\r\n          text: stylePrompt,\r\n          imageDataUrls,\r\n          generationConfig\r\n        });\r\n\r\n        // Clean up the response\r\n        let cleanedResponse = response\r\n          .replace(/^(Style:|Visual Style:|Artistic Style:)\\s*/i, '') // Remove style prefixes\r\n          .replace(/\\s+/g, ' ') // Normalize whitespace\r\n          .trim();\r\n        \r\n        console.log(\"🎨 Style reanalysis result:\", cleanedResponse);\r\n        setStyleAnalysis(cleanedResponse);\r\n      } catch (error: any) {\r\n        console.error(\"Reanalyze style failed:\", error);\r\n        \r\n        // Handle specific API errors\r\n        if (error.message?.includes('429') || error.message?.includes('rate limit')) {\r\n          console.error(\"Rate limit exceeded. Please try again later.\");\r\n        } else if (error.message?.includes('401') || error.message?.includes('authentication')) {\r\n          console.error(\"Authentication failed. Please check your API key.\");\r\n        } else if (error.message?.includes('403') || error.message?.includes('forbidden')) {\r\n          console.error(\"Access forbidden. Please check your API permissions.\");\r\n        }\r\n      } finally {\r\n        setIsAnalyzingStyle(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Auto-analyze images when they are added, honoring Speed Mode (existing behavior)\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    const run = async () => {\r\n      if (!autoAnalyze || images.length === 0) return;\r\n      setIsAnalyzing(true);\r\n      try {\r\n        // Convert image to data URL for Gemini API\r\n        const imageDataUrls = await getImageDataUrls(images);\r\n        if (imageDataUrls.length === 0) {\r\n          throw new Error(\"Failed to process image\");\r\n        }\r\n\r\n        // Get API key and model\r\n        const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\r\n        if (!apiKey) {\r\n          throw new Error(\"Gemini API key not found\");\r\n        }\r\n\r\n        const model = speedMode === 'Quality' ? 'gemini-2.5-pro' : 'gemini-2.5-flash';\r\n\r\n        // Define generation config based on speed mode\r\n        const generationConfig = speedMode === 'Quality'\r\n          ? { temperature: 0.4, topP: 0.8, topK: 40, maxOutputTokens: 2048 }\r\n          : { temperature: 0.7, topP: 0.9, topK: 40, maxOutputTokens: 1024 };\r\n\r\n        // Create comprehensive analysis prompt\r\n        const analysisPrompt = speedMode === 'Quality'\r\n          ? \"Analyze this image comprehensively and describe what you see. Include details about the subject, setting, composition, colors, lighting, style, and any notable elements. Provide a detailed description suitable for creating image generation prompts.\"\r\n          : \"Describe this image in detail, including the subject, setting, colors, and style.\";\r\n\r\n        // Call Gemini API\r\n        const response = await generateWithImagesREST({\r\n          apiKey,\r\n          model,\r\n          text: analysisPrompt,\r\n          imageDataUrls,\r\n          generationConfig\r\n        });\r\n        \r\n        // Generate a prompt based on the analysis\r\n        const generatedPrompt = await textToPrompt(\r\n          `Create an image generation prompt based on this analysis: ${response}`,\r\n          undefined,\r\n          speedMode === 'Quality' ? 'high detail, professional quality' : 'good quality'\r\n        );\r\n        \r\n        if (!cancelled) {\r\n          setPrompt(generatedPrompt);\r\n          setEditorSeed(generatedPrompt);\r\n          setLastSource(\"gemini-mm\");\r\n        }\r\n      } catch (error: any) {\r\n        console.error(\"Auto-analyze call failed:\", error);\r\n        \r\n        // Handle specific API errors\r\n        if (error.message?.includes('429') || error.message?.includes('rate limit')) {\r\n          console.error(\"Rate limit exceeded. Please try again later.\");\r\n        } else if (error.message?.includes('401') || error.message?.includes('authentication')) {\r\n          console.error(\"Authentication failed. Please check your API key.\");\r\n        } else if (error.message?.includes('403') || error.message?.includes('forbidden')) {\r\n          console.error(\"Access forbidden. Please check your API permissions.\");\r\n        }\r\n      } finally {\r\n        if (!cancelled) setIsAnalyzing(false);\r\n      }\r\n    };\r\n    run();\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, [images, autoAnalyze, speedMode]);\r\n\r\n  // Auto-analyze subject images when they are added\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    const run = async () => {\r\n      if (!autoAnalyzeSubject || subjectImages.length === 0) return;\r\n      \r\n      // Clear previous analysis to prevent cached results\r\n      setSubjectAnalysis('');\r\n      setIsAnalyzingSubject(true);\r\n      \r\n      try {\r\n        // Convert image to data URL for Gemini API\r\n        const imageDataUrls = await getImageDataUrls(subjectImages);\r\n        if (imageDataUrls.length === 0) {\r\n          throw new Error(\"Failed to process image\");\r\n        }\r\n\r\n        // Get API key and model\r\n        const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\r\n        if (!apiKey) {\r\n          throw new Error(\"Gemini API key not found\");\r\n        }\r\n\r\n        const model = speedMode === 'Quality' ? 'gemini-2.5-pro' : 'gemini-2.5-flash';\r\n\r\n        // Define generation config based on speed mode\r\n        const generationConfig = speedMode === 'Quality'\r\n          ? { temperature: 0.4, topP: 0.8, topK: 40, maxOutputTokens: 2048 }\r\n          : { temperature: 0.7, topP: 0.9, topK: 40, maxOutputTokens: 1024 };\r\n\r\n        // Create focused subject analysis prompt\r\n        const subjectPrompt = speedMode === 'Quality'\r\n          ? \"Analyze and describe the main subjects, people, objects, and characters in this image. Focus on: physical appearance, clothing/attire, poses/actions, expressions, key objects, and notable details. Provide a detailed description suitable for image generation prompts. Do NOT describe the background, setting, or artistic style.\"\r\n          : \"Describe the main subjects, people, and objects in this image. Focus on appearance, clothing, and actions, not the background or style.\";\r\n\r\n        // Call Gemini API\r\n        const response = await generateWithImagesREST({\r\n          apiKey,\r\n          model,\r\n          text: subjectPrompt,\r\n          imageDataUrls,\r\n          generationConfig\r\n        });\r\n\r\n        // Clean up the response\r\n        let cleanedResponse = response\r\n          .replace(/^(Subject:|Main Subject:|People:|Objects:)\\s*/i, '') // Remove subject prefixes\r\n          .replace(/\\s+/g, ' ') // Normalize whitespace\r\n          .trim();\r\n\r\n        console.log(\"🔍 Auto-Analyze Subject - Response:\", cleanedResponse);\r\n        if (!cancelled) {\r\n          setSubjectAnalysis(cleanedResponse);\r\n        }\r\n      } catch (error: any) {\r\n        console.error(\"Auto-analyze subject failed:\", error);\r\n        \r\n        // Handle specific API errors\r\n        if (error.message?.includes('429') || error.message?.includes('rate limit')) {\r\n          console.error(\"Rate limit exceeded. Please try again later.\");\r\n        } else if (error.message?.includes('401') || error.message?.includes('authentication')) {\r\n          console.error(\"Authentication failed. Please check your API key.\");\r\n        } else if (error.message?.includes('403') || error.message?.includes('forbidden')) {\r\n          console.error(\"Access forbidden. Please check your API permissions.\");\r\n        }\r\n      } finally {\r\n        if (!cancelled) setIsAnalyzingSubject(false);\r\n      }\r\n    };\r\n    run();\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, [subjectImages, autoAnalyzeSubject, speedMode]);\r\n\r\n  // Clear subject analysis when subject images are removed\r\n  useEffect(() => {\r\n    if (subjectImages.length === 0 && subjectAnalysis) {\r\n      setSubjectAnalysis('');\r\n    }\r\n  }, [subjectImages, subjectAnalysis]);\r\n\r\n  // Auto-analyze scene images when they are added\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    const run = async () => {\r\n      if (!autoAnalyzeScene || sceneImages.length === 0) return;\r\n      setIsAnalyzingScene(true);\r\n      \r\n      try {\r\n        // Convert image to data URL for Gemini API\r\n        const imageDataUrls = await getImageDataUrls(sceneImages);\r\n        if (imageDataUrls.length === 0) {\r\n          throw new Error(\"Failed to process image\");\r\n        }\r\n\r\n        // Get API key and model\r\n        const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\r\n        if (!apiKey) {\r\n          throw new Error(\"Gemini API key not found\");\r\n        }\r\n\r\n        const model = speedMode === 'Quality' ? 'gemini-2.5-pro' : 'gemini-2.5-flash';\r\n\r\n        // Define generation config based on speed mode\r\n        const generationConfig = speedMode === 'Quality'\r\n          ? { temperature: 0.4, topP: 0.8, topK: 40, maxOutputTokens: 2048 }\r\n          : { temperature: 0.7, topP: 0.9, topK: 40, maxOutputTokens: 1024 };\r\n\r\n        // Create focused scene analysis prompt\r\n        const scenePrompt = speedMode === 'Quality'\r\n          ? \"Analyze and describe the setting, environment, and background of this image. Focus on: location/setting, architecture, landscape, weather/time of day, environmental details, spatial composition, and contextual elements. Provide a detailed description suitable for image generation prompts. Do NOT describe the people, objects, or artistic style.\"\r\n          : \"Describe the setting, location, and environment in this image. Focus on the background, architecture, and setting, not the people or style.\";\r\n\r\n        // Call Gemini API\r\n        const response = await generateWithImagesREST({\r\n          apiKey,\r\n          model,\r\n          text: scenePrompt,\r\n          imageDataUrls,\r\n          generationConfig\r\n        });\r\n\r\n        // Clean up the response\r\n        let cleanedResponse = response\r\n          .replace(/^(Scene:|Setting:|Environment:|Background:)\\s*/i, '') // Remove scene prefixes\r\n          .replace(/\\s+/g, ' ') // Normalize whitespace\r\n          .trim();\r\n\r\n        console.log(\"🔍 Auto-Analyze Scene - Response:\", cleanedResponse);\r\n        if (!cancelled) {\r\n          setSceneAnalysis(cleanedResponse);\r\n        }\r\n      } catch (error: any) {\r\n        console.error(\"Auto-analyze scene failed:\", error);\r\n        \r\n        // Handle specific API errors\r\n        if (error.message?.includes('429') || error.message?.includes('rate limit')) {\r\n          console.error(\"Rate limit exceeded. Please try again later.\");\r\n        } else if (error.message?.includes('401') || error.message?.includes('authentication')) {\r\n          console.error(\"Authentication failed. Please check your API key.\");\r\n        } else if (error.message?.includes('403') || error.message?.includes('forbidden')) {\r\n          console.error(\"Access forbidden. Please check your API permissions.\");\r\n        }\r\n      } finally {\r\n        if (!cancelled) setIsAnalyzingScene(false);\r\n      }\r\n    };\r\n    run();\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, [sceneImages, autoAnalyzeScene, speedMode]);\r\n\r\n  // Clear scene analysis when scene images are removed\r\n  useEffect(() => {\r\n    if (sceneImages.length === 0 && sceneAnalysis) {\r\n      setSceneAnalysis('');\r\n    }\r\n  }, [sceneImages, sceneAnalysis]);\r\n\r\n  // Auto-analyze style images when they are added\r\n  useEffect(() => {\r\n    let cancelled = false;\r\n    const run = async () => {\r\n      if (!autoAnalyzeStyle || styleImages.length === 0) return;\r\n      setIsAnalyzingStyle(true);\r\n      \r\n      try {\r\n        // Convert image to data URL for Gemini API\r\n        const imageDataUrls = await getImageDataUrls(styleImages);\r\n        if (imageDataUrls.length === 0) {\r\n          throw new Error(\"Failed to process image\");\r\n        }\r\n\r\n        // Get API key and model\r\n        const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\r\n        if (!apiKey) {\r\n          throw new Error(\"Gemini API key not found\");\r\n        }\r\n\r\n        const model = speedMode === 'Quality' ? 'gemini-2.5-pro' : 'gemini-2.5-flash';\r\n\r\n        // Define generation config based on speed mode\r\n        const generationConfig = speedMode === 'Quality'\r\n          ? { temperature: 0.4, topP: 0.8, topK: 40, maxOutputTokens: 2048 }\r\n          : { temperature: 0.7, topP: 0.9, topK: 40, maxOutputTokens: 1024 };\r\n\r\n        // Create focused style analysis prompt\r\n        const stylePrompt = speedMode === 'Quality'\r\n          ? \"Analyze the artistic style, visual treatment, composition, and aesthetic approach of this image. Focus on: lighting style, color palette, mood/atmosphere, artistic technique, visual composition, and overall aesthetic treatment. Provide a concise but detailed description suitable for image generation prompts. Do NOT describe the subject or people in the image.\"\r\n          : \"Describe the visual style, lighting, colors, and artistic approach of this image. Focus on style elements, not the subject.\";\r\n\r\n        // Call Gemini API\r\n        const response = await generateWithImagesREST({\r\n          apiKey,\r\n          model,\r\n          text: stylePrompt,\r\n          imageDataUrls,\r\n          generationConfig\r\n        });\r\n\r\n        // Clean up the response\r\n        let cleanedResponse = response\r\n          .replace(/^(Style:|Visual Style:|Artistic Style:)\\s*/i, '') // Remove style prefixes\r\n          .replace(/\\s+/g, ' ') // Normalize whitespace\r\n          .trim();\r\n\r\n        console.log(\"🎨 Auto-Analyze Style - Response:\", cleanedResponse);\r\n        if (!cancelled) {\r\n          setStyleAnalysis(cleanedResponse);\r\n        }\r\n      } catch (error: any) {\r\n        console.error(\"Auto-analyze style failed:\", error);\r\n        \r\n        // Handle specific API errors\r\n        if (error.message?.includes('429') || error.message?.includes('rate limit')) {\r\n          console.error(\"Rate limit exceeded. Please try again later.\");\r\n        } else if (error.message?.includes('401') || error.message?.includes('authentication')) {\r\n          console.error(\"Authentication failed. Please check your API key.\");\r\n        } else if (error.message?.includes('403') || error.message?.includes('forbidden')) {\r\n          console.error(\"Access forbidden. Please check your API permissions.\");\r\n        }\r\n      } finally {\r\n        if (!cancelled) setIsAnalyzingStyle(false);\r\n      }\r\n    };\r\n    run();\r\n    return () => {\r\n      cancelled = true;\r\n    };\r\n  }, [styleImages, autoAnalyzeStyle, speedMode]);\r\n\r\n  // Clear style analysis when style images are removed\r\n  useEffect(() => {\r\n    if (styleImages.length === 0 && styleAnalysis) {\r\n      setStyleAnalysis('');\r\n    }\r\n  }, [styleImages, styleAnalysis]);\r\n\r\n  // Combine subject, scene, and style analysis results into the main prompt\r\n  useEffect(() => {\r\n    if (subjectAnalysis || sceneAnalysis || styleAnalysis) {\r\n      const combinedPrompt = composePrompt({\r\n        userText: '', // Start fresh for combined analysis\r\n        contentSummary: subjectAnalysis,\r\n        scene: sceneAnalysis,\r\n        style: styleAnalysis,\r\n        useScene: !!sceneAnalysis,\r\n        useStyle: !!styleAnalysis\r\n      });\r\n      \r\n      if (combinedPrompt !== prompt) {\r\n        setPrompt(combinedPrompt);\r\n        setEditorSeed(combinedPrompt);\r\n        \r\n        // Determine the appropriate source label based on what's combined\r\n        const hasSubject = !!subjectAnalysis;\r\n        const hasScene = !!sceneAnalysis;\r\n        const hasStyle = !!styleAnalysis;\r\n        \r\n        if (hasSubject && hasScene && hasStyle) {\r\n          setLastSource(\"subject+scene+style\");\r\n        } else if (hasSubject && hasScene) {\r\n          setLastSource(\"subject+scene\");\r\n        } else if (hasSubject && hasStyle) {\r\n          setLastSource(\"subject+style\");\r\n        } else if (hasScene && hasStyle) {\r\n          setLastSource(\"scene+style\");\r\n        } else if (hasSubject) {\r\n          setLastSource(\"subject\");\r\n        } else if (hasScene) {\r\n          setLastSource(\"scene\");\r\n        } else if (hasStyle) {\r\n          setLastSource(\"style\");\r\n        }\r\n      }\r\n    } else {\r\n      // Clear prompt when no analyses are present\r\n      if (prompt && (lastSource === \"subject\" || lastSource === \"scene\" || lastSource === \"style\" || \r\n                     lastSource?.includes(\"subject\") || lastSource?.includes(\"scene\") || lastSource?.includes(\"style\"))) {\r\n        setPrompt(\"\");\r\n        setEditorSeed(\"\");\r\n        setLastSource(undefined);\r\n      }\r\n    }\r\n  }, [subjectAnalysis, sceneAnalysis, styleAnalysis, prompt, lastSource]);\r\n\r\n  // Generate preview URLs for image thumbnails\r\n  useEffect(() => {\r\n    if (subjectImages.length > 0) {\r\n      const url = URL.createObjectURL(subjectImages[0]);\r\n      setSubjectPreview(url);\r\n      return () => URL.revokeObjectURL(url);\r\n    } else {\r\n      setSubjectPreview(undefined);\r\n    }\r\n  }, [subjectImages]);\r\n\r\n  useEffect(() => {\r\n    if (sceneImages.length > 0) {\r\n      const url = URL.createObjectURL(sceneImages[0]);\r\n      setScenePreview(url);\r\n      return () => URL.revokeObjectURL(url);\r\n    } else {\r\n      setScenePreview(undefined);\r\n    }\r\n  }, [sceneImages]);\r\n\r\n  useEffect(() => {\r\n    if (styleImages.length > 0) {\r\n      const url = URL.createObjectURL(styleImages[0]);\r\n      setStylePreview(url);\r\n      return () => URL.revokeObjectURL(url);\r\n    } else {\r\n      setStylePreview(undefined);\r\n    }\r\n  }, [styleImages]);\r\n\r\n  // Manual trigger function for general analysis\r\n  const handleRunAnalysis = async () => {\r\n    if (images.length === 0) return;\r\n    setIsAnalyzing(true);\r\n    try {\r\n      // Convert image to data URL for Gemini API\r\n      const imageDataUrls = await getImageDataUrls(images);\r\n      if (imageDataUrls.length === 0) {\r\n        throw new Error(\"Failed to process image\");\r\n      }\r\n\r\n      // Get API key and model\r\n      const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\r\n      if (!apiKey) {\r\n        throw new Error(\"Gemini API key not found\");\r\n      }\r\n\r\n      const model = speedMode === 'Quality' ? 'gemini-2.5-pro' : 'gemini-2.5-flash';\r\n\r\n      // Define generation config based on speed mode\r\n      const generationConfig = speedMode === 'Quality'\r\n        ? { temperature: 0.4, topP: 0.8, topK: 40, maxOutputTokens: 2048 }\r\n        : { temperature: 0.7, topP: 0.9, topK: 40, maxOutputTokens: 1024 };\r\n\r\n      // Create comprehensive analysis prompt\r\n      const analysisPrompt = speedMode === 'Quality'\r\n        ? \"Analyze this image comprehensively and describe what you see. Include details about the subject, setting, composition, colors, lighting, style, and any notable elements. Provide a detailed description suitable for creating image generation prompts.\"\r\n        : \"Describe this image in detail, including the subject, setting, colors, and style.\";\r\n\r\n      // Call Gemini API\r\n      const response = await generateWithImagesREST({\r\n        apiKey,\r\n        model,\r\n        text: analysisPrompt,\r\n        imageDataUrls,\r\n        generationConfig\r\n      });\r\n      \r\n      // Generate a prompt based on the analysis\r\n      const generatedPrompt = await textToPrompt(\r\n        `Create an image generation prompt based on this analysis: ${response}`,\r\n        undefined,\r\n        speedMode === 'Quality' ? 'high detail, professional quality' : 'good quality'\r\n      );\r\n      \r\n      setPrompt(generatedPrompt);\r\n      setEditorSeed(generatedPrompt);\r\n      setLastSource(\"gemini-mm\");\r\n    } catch (error: any) {\r\n      console.error(\"Manual analysis failed:\", error);\r\n      \r\n      // Handle specific API errors\r\n      if (error.message?.includes('429') || error.message?.includes('rate limit')) {\r\n        console.error(\"Rate limit exceeded. Please try again later.\");\r\n      } else if (error.message?.includes('401') || error.message?.includes('authentication')) {\r\n        console.error(\"Authentication failed. Please check your API key.\");\r\n      } else if (error.message?.includes('403') || error.message?.includes('forbidden')) {\r\n        console.error(\"Access forbidden. Please check your API permissions.\");\r\n      }\r\n    } finally {\r\n      setIsAnalyzing(false);\r\n    }\r\n  };\r\n\r\n  // Manual trigger functions for independent analysis\r\n  // Test function to verify server and API key works\r\n  const testApiKey = async (apiKey: string) => {\r\n    try {\r\n      // Test server health first\r\n      const healthEndpoint = `http://localhost:3001/api/health`;\r\n      console.log(\"🔧 Testing server health:\", healthEndpoint);\r\n      \r\n      const healthResponse = await fetch(healthEndpoint);\r\n      if (!healthResponse.ok) {\r\n        throw new Error(`Server not available: ${healthResponse.status}`);\r\n      }\r\n      \r\n      const healthData = await healthResponse.json();\r\n      console.log(\"🔧 Server health:\", healthData);\r\n      \r\n      // Test actual API functionality\r\n      const testEndpoint = `http://localhost:3001/api/test`;\r\n      console.log(\"🔧 Testing API functionality:\", testEndpoint);\r\n      \r\n      const response = await fetch(testEndpoint);\r\n      \r\n      if (response.ok) {\r\n        console.log(\"✅ API Key test successful\");\r\n        return true;\r\n      } else {\r\n        const errorText = await response.text();\r\n        console.error(\"❌ API Key test failed:\", response.status, errorText);\r\n        \r\n        // Provide specific error messages\r\n        if (response.status === 429) {\r\n          alert(\"API quota exceeded. Please check your Gemini API quota limits or try again later.\");\r\n        } else if (response.status === 401) {\r\n          alert(\"Authentication failed. Please check your Gemini API key.\");\r\n        } else if (response.status === 403) {\r\n          alert(\"Access forbidden. Please verify your API key has the necessary permissions.\");\r\n        } else {\r\n          alert(`API test failed with status ${response.status}. Please check your API key and try again.`);\r\n        }\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"❌ API Key test error:\", error);\r\n      alert(\"Network error during API test. Please check your internet connection and try again.\");\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const runSubjectAnalysis = async () => {\r\n    console.log(\"🔍 runSubjectAnalysis called, subjectImages.length:\", subjectImages.length);\r\n    if (subjectImages.length === 0) return;\r\n    setIsAnalyzingSubject(true);\r\n    \r\n    try {\r\n      // Convert image to data URL for Gemini API\r\n      const imageDataUrls = await getImageDataUrls(subjectImages);\r\n      if (imageDataUrls.length === 0) {\r\n        throw new Error(\"Failed to process image\");\r\n      }\r\n\r\n      // Get API key and model\r\n      const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\r\n      if (!apiKey) {\r\n        throw new Error(\"Gemini API key not found\");\r\n      }\r\n\r\n      const model = speedMode === 'Quality' ? 'gemini-2.5-pro' : 'gemini-2.5-flash';\r\n\r\n      // Define generation config based on speed mode\r\n      const generationConfig = speedMode === 'Quality'\r\n        ? { temperature: 0.4, topP: 0.8, topK: 40, maxOutputTokens: 2048 }\r\n        : { temperature: 0.7, topP: 0.9, topK: 40, maxOutputTokens: 1024 };\r\n\r\n      // Create focused subject analysis prompt\r\n      const subjectPrompt = speedMode === 'Quality'\r\n        ? \"Analyze and describe the main subjects, people, objects, and characters in this image. Focus on: physical appearance, clothing/attire, poses/actions, expressions, key objects, and notable details. Provide a detailed description suitable for image generation prompts. Do NOT describe the background, setting, or artistic style.\"\r\n        : \"Describe the main subjects, people, and objects in this image. Focus on appearance, clothing, and actions, not the background or style.\";\r\n\r\n      // Call Gemini API\r\n      const response = await generateWithImagesREST({\r\n        apiKey,\r\n        model,\r\n        text: subjectPrompt,\r\n        imageDataUrls,\r\n        generationConfig\r\n      });\r\n\r\n      // Clean up the response\r\n      let cleanedResponse = response\r\n        .replace(/^(Subject:|Main Subject:|People:|Objects:)\\s*/i, '') // Remove subject prefixes\r\n        .replace(/\\s+/g, ' ') // Normalize whitespace\r\n        .trim();\r\n\r\n      console.log(\"🔍 Subject analysis result:\", cleanedResponse);\r\n      setSubjectAnalysis(cleanedResponse);\r\n      console.log(\"🔍 Subject analysis complete\");\r\n    } catch (error: any) {\r\n      console.error(\"🚨 Subject analysis failed:\", error);\r\n      \r\n      // More specific error handling\r\n      if (error.message?.includes('429') || error.message?.includes('rate limit')) {\r\n        alert(`API Rate Limit Exceeded: You've hit your Gemini API quota. Even with paid tier, you may have daily/hourly limits. Please wait a few minutes and try again, or check your Google AI Studio usage dashboard.`);\r\n      } else if (error.message?.includes('401') || error.message?.includes('authentication')) {\r\n        alert(`API Authentication Error: Please check your VITE_GEMINI_API_KEY in the .env file.`);\r\n      } else if (error.message?.includes('403') || error.message?.includes('forbidden')) {\r\n        alert(`API Access Forbidden: Your API key may not have access to the Gemini model. Check your Google AI Studio permissions.`);\r\n      } else {\r\n        alert(`Subject analysis failed: ${error.message || error}`);\r\n      }\r\n    } finally {\r\n      setIsAnalyzingSubject(false);\r\n    }\r\n  };\r\n\r\n  const runSceneAnalysis = async () => {\r\n    if (sceneImages.length === 0) return;\r\n    setIsAnalyzingScene(true);\r\n    \r\n    try {\r\n      // Convert image to data URL for Gemini API\r\n      const imageDataUrls = await getImageDataUrls(sceneImages);\r\n      if (imageDataUrls.length === 0) {\r\n        throw new Error(\"Failed to process image\");\r\n      }\r\n\r\n      // Get API key and model\r\n      const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\r\n      if (!apiKey) {\r\n        throw new Error(\"Gemini API key not found\");\r\n      }\r\n\r\n      const model = speedMode === 'Quality' ? 'gemini-2.5-pro' : 'gemini-2.5-flash';\r\n\r\n      // Define generation config based on speed mode\r\n      const generationConfig = speedMode === 'Quality'\r\n        ? { temperature: 0.4, topP: 0.8, topK: 40, maxOutputTokens: 2048 }\r\n        : { temperature: 0.7, topP: 0.9, topK: 40, maxOutputTokens: 1024 };\r\n\r\n      // Create focused scene analysis prompt\r\n      const scenePrompt = speedMode === 'Quality'\r\n        ? \"Analyze and describe the setting, environment, and background of this image. Focus on: location/setting, architecture, landscape, weather/time of day, environmental details, spatial composition, and contextual elements. Provide a detailed description suitable for image generation prompts. Do NOT describe the people, objects, or artistic style.\"\r\n        : \"Describe the setting, location, and environment in this image. Focus on the background, architecture, and setting, not the people or style.\";\r\n\r\n      // Call Gemini API\r\n      const response = await generateWithImagesREST({\r\n        apiKey,\r\n        model,\r\n        text: scenePrompt,\r\n        imageDataUrls,\r\n        generationConfig\r\n      });\r\n\r\n      // Clean up the response\r\n      let cleanedResponse = response\r\n        .replace(/^(Scene:|Setting:|Environment:|Background:)\\s*/i, '') // Remove scene prefixes\r\n        .replace(/\\s+/g, ' ') // Normalize whitespace\r\n        .trim();\r\n\r\n      console.log(\"🔍 Scene analysis result:\", cleanedResponse);\r\n      setSceneAnalysis(cleanedResponse);\r\n    } catch (error: any) {\r\n      console.error(\"Scene analysis failed:\", error);\r\n      \r\n      // Handle specific API errors\r\n      if (error.message?.includes('429') || error.message?.includes('rate limit')) {\r\n        console.error(\"Rate limit exceeded. Please try again later.\");\r\n      } else if (error.message?.includes('401') || error.message?.includes('authentication')) {\r\n        console.error(\"Authentication failed. Please check your API key.\");\r\n      } else if (error.message?.includes('403') || error.message?.includes('forbidden')) {\r\n        console.error(\"Access forbidden. Please check your API permissions.\");\r\n      }\r\n    } finally {\r\n      setIsAnalyzingScene(false);\r\n    }\r\n  };\r\n\r\n  const runStyleAnalysis = async () => {\r\n    if (styleImages.length === 0) return;\r\n    setIsAnalyzingStyle(true);\r\n    \r\n    try {\r\n      // Convert image to data URL for Gemini API\r\n      const imageDataUrls = await getImageDataUrls(styleImages);\r\n      if (imageDataUrls.length === 0) {\r\n        throw new Error(\"Failed to process image\");\r\n      }\r\n\r\n      // Get API key and model\r\n      const apiKey = import.meta.env.VITE_GEMINI_API_KEY;\r\n      if (!apiKey) {\r\n        throw new Error(\"Gemini API key not found\");\r\n      }\r\n\r\n      const model = speedMode === 'Quality' ? 'gemini-2.5-pro' : 'gemini-2.5-flash';\r\n\r\n      // Define generation config based on speed mode\r\n      const generationConfig = speedMode === 'Quality'\r\n        ? { temperature: 0.4, topP: 0.8, topK: 40, maxOutputTokens: 2048 }\r\n        : { temperature: 0.7, topP: 0.9, topK: 40, maxOutputTokens: 1024 };\r\n\r\n      // Create focused style analysis prompt\r\n      const stylePrompt = speedMode === 'Quality'\r\n        ? \"Analyze the artistic style, visual treatment, composition, and aesthetic approach of this image. Focus on: lighting style, color palette, mood/atmosphere, artistic technique, visual composition, and overall aesthetic treatment. Provide a concise but detailed description suitable for image generation prompts. Do NOT describe the subject or people in the image.\"\r\n        : \"Describe the visual style, lighting, colors, and artistic approach of this image. Focus on style elements, not the subject.\";\r\n\r\n      // Call Gemini API\r\n      const response = await generateWithImagesREST({\r\n        apiKey,\r\n        model,\r\n        text: stylePrompt,\r\n        imageDataUrls,\r\n        generationConfig\r\n      });\r\n\r\n      // Clean up the response\r\n      let cleanedResponse = response\r\n        .replace(/^(Style:|Visual Style:|Artistic Style:)\\s*/i, '') // Remove style prefixes\r\n        .replace(/\\s+/g, ' ') // Normalize whitespace\r\n        .trim();\r\n\r\n      console.log(\"🎨 Style analysis result:\", cleanedResponse);\r\n      setStyleAnalysis(cleanedResponse);\r\n      \r\n    } catch (error: any) {\r\n      console.error(\"Style analysis failed:\", error);\r\n      \r\n      // Handle specific API errors\r\n      if (error.message?.includes('429') || error.message?.includes('rate limit')) {\r\n        console.error(\"Rate limit exceeded. Please try again later.\");\r\n      } else if (error.message?.includes('401') || error.message?.includes('authentication')) {\r\n        console.error(\"Authentication failed. Please check your API key.\");\r\n      } else if (error.message?.includes('403') || error.message?.includes('forbidden')) {\r\n        console.error(\"Access forbidden. Please check your API permissions.\");\r\n      }\r\n    } finally {\r\n      setIsAnalyzingStyle(false);\r\n    }\r\n  };\r\n\r\n  const handleClearGeneral = () => {\r\n    setImages([]);\r\n  };\r\n\r\n  const handleSimpleStyle = (style: string) => {\r\n    if (isSimpleStyleActive) {\r\n      // Toggle OFF: Restore original prompt\r\n      setPrompt(originalPromptBeforeSimple);\r\n      setEditorSeed(originalPromptBeforeSimple);\r\n      setIsSimpleStyleActive(false);\r\n      setOriginalPromptBeforeSimple('');\r\n    } else {\r\n      // Toggle ON: Store current prompt and apply simple style\r\n      setOriginalPromptBeforeSimple(prompt);\r\n      setStyleAnalysis(style);\r\n      setPrompt(style);\r\n      setEditorSeed(style);\r\n      setLastSource(\"style\");\r\n      setIsSimpleStyleActive(true);\r\n    }\r\n  };\r\n\r\n  const handleClearAll = () => {\r\n    setPrompt(\"\");\r\n    setEditorSeed(\"\");\r\n    setImages([]);\r\n    setSubjectImages([]);\r\n    setSceneImages([]);\r\n    setStyleImages([]);\r\n    setSubjectAnalysis('');\r\n    setSceneAnalysis('');\r\n    setStyleAnalysis('');\r\n    setLastSource(undefined);\r\n    \r\n    // Reset analyzing states to prevent blocking new uploads\r\n    setIsAnalyzing(false);\r\n    setIsAnalyzingSubject(false);\r\n    setIsAnalyzingScene(false);\r\n    setIsAnalyzingStyle(false);\r\n    \r\n    // Reset preview states\r\n    setSubjectPreview(undefined);\r\n    setScenePreview(undefined);\r\n    setStylePreview(undefined);\r\n    \r\n    // Reset simple style states\r\n    setIsSimpleStyleActive(false);\r\n    setOriginalPromptBeforeSimple('');\r\n  };\r\n\r\n  const handleCopy = async () => {\r\n    if (!prompt) return;\r\n    try {\r\n      await navigator.clipboard.writeText(prompt);\r\n    } catch (e) {\r\n      console.warn(\"Copy failed:\", e);\r\n    }\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    setEditorSeed(prompt);\r\n  };\r\n\r\n  const handleClearPrompt = () => {\r\n    setPrompt(\"\");\r\n    setLastSource(undefined);\r\n  };\r\n\r\n  const handleRegenerate = async () => {\r\n    if (!prompt) return;\r\n    try {\r\n      setIsGenerating(true);\r\n      console.log('🔄 Starting regenerate process...');\r\n      \r\n      const improved = await refinePrompt(prompt, 'refine');\r\n      \r\n      setPrompt(improved);\r\n      setEditorSeed(improved);\r\n      setLastSource(\"gemini-text\");\r\n    } catch (e) {\r\n      console.error(\"Regenerate failed:\", e);\r\n      alert(\"Could not regenerate prompt. Please check your API key and try again.\");\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative dark min-h-screen text-dark-text-primary\">\r\n      <BackgroundCanvas color=\"#000000\" opacity={1} effect=\"grain\" effectOpacity={0.06} />\r\n      <div className=\"max-w-6xl mx-auto px-4\">\r\n        <BrandHeader logoSrc=\"Genie.png\" />\r\n      </div>\r\n      <div className=\"max-w-6xl mx-auto py-6 px-4\">\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-4\">\r\n          {/* Left: Image drop zone */}\r\n          <div className=\"panel-standard-height\">\r\n            <ImageDropZone\r\n              images={images}\r\n              onImagesChange={setImages}\r\n              onRunAnalysis={handleRunAnalysis}\r\n              isAnalyzing={isAnalyzing}\r\n              onClearGeneral={handleClearGeneral}\r\n              autoAnalyze={autoAnalyze}\r\n              onAutoAnalyzeChange={setAutoAnalyze}\r\n              subjectImages={subjectImages}\r\n              onSubjectImagesChange={setSubjectImages}\r\n              onRunSubjectAnalysis={runSubjectAnalysis}\r\n              isAnalyzingSubject={isAnalyzingSubject}\r\n              subjectPreview={subjectPreview}\r\n              autoAnalyzeSubject={autoAnalyzeSubject}\r\n              onAutoAnalyzeSubjectChange={setAutoAnalyzeSubject}\r\n              sceneImages={sceneImages}\r\n              onSceneImagesChange={setSceneImages}\r\n              onRunSceneAnalysis={runSceneAnalysis}\r\n              isAnalyzingScene={isAnalyzingScene}\r\n              scenePreview={scenePreview}\r\n              autoAnalyzeScene={autoAnalyzeScene}\r\n              onAutoAnalyzeSceneChange={setAutoAnalyzeScene}\r\n              styleImages={styleImages}\r\n              onStyleImagesChange={setStyleImages}\r\n              onRunStyleAnalysis={runStyleAnalysis}\r\n              isAnalyzingStyle={isAnalyzingStyle}\r\n              stylePreview={stylePreview}\r\n              autoAnalyzeStyle={autoAnalyzeStyle}\r\n              onAutoAnalyzeStyleChange={setAutoAnalyzeStyle}\r\n              onSimpleStyle={handleSimpleStyle}\r\n              styleAnalysis={styleAnalysis}\r\n              isSimpleStyleActive={isSimpleStyleActive}\r\n            />\r\n          </div>\r\n\r\n          {/* Second: Prompt editor */}\r\n          <div className={editorExpanded ? \"panel-auto-height\" : \"panel-standard-height\"}>\r\n            <DM2PromptEditor\r\n              initialText={editorSeed}\r\n              initialSpeedMode={speedMode}\r\n              onSpeedModeChange={setSpeedMode}\r\n              onSend={handleSend}\r\n              onClear={() => { handleClearAll(); setEditorExpanded(false); }}\r\n              onReanalyze={handleReanalyze}\r\n              onResizeStart={() => setEditorExpanded(true)}\r\n              onResizeEnd={() => setEditorExpanded(true)}\r\n              styleDesc={styleAnalysis}\r\n              sceneDesc={sceneAnalysis}\r\n              useStyle={useStyle}\r\n              useScene={useScene}\r\n              onToggleStyle={setUseStyle}\r\n              onToggleScene={setUseScene}\r\n            />\r\n          </div>\r\n\r\n          {/* Third: Current prompt with actions */}\r\n          <div className=\"panel-standard-height\">\r\n            <CurrentPromptPanel\r\n              prompt={prompt}\r\n              source={lastSource}\r\n              onCopy={handleCopy}\r\n              onEdit={handleEdit}\r\n              onClear={handleClearPrompt}\r\n              onRegenerate={handleRegenerate}\r\n            />\r\n          </div>\r\n\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\BackgroundCanvas.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\BrandHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\CurrentPromptPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\DM2PromptEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":2,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2844,2847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2844,2847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3924,3927],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3924,3927],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4301,4304],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4301,4304],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5101,5104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5101,5104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":182,"column":9,"nodeType":"JSXOpeningElement","endLine":182,"endColumn":86},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":197,"column":9,"nodeType":"JSXOpeningElement","endLine":197,"endColumn":86},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":215,"column":9,"nodeType":"JSXOpeningElement","endLine":215,"endColumn":86},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":236,"column":9,"nodeType":"JSXOpeningElement","endLine":236,"endColumn":86},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":256,"column":9,"nodeType":"JSXOpeningElement","endLine":256,"endColumn":86},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":277,"column":9,"nodeType":"JSXOpeningElement","endLine":277,"endColumn":86}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo, useState, useEffect, useRef } from 'react';\r\nimport { cn } from \"../lib/utils\";\r\n\r\nexport type RewriteStyle = 'Descriptive' | 'Concise' | 'Marketing' | 'Technical';\r\nexport type SpeedMode = 'Fast' | 'Quality';\r\n\r\ninterface DM2PromptEditorProps {\r\n  onSend: (finalPrompt: string) => void;\r\n  onClear?: () => void;\r\n  initialText?: string;\r\n  onResizeStart?: () => void;\r\n  onResizeEnd?: (height: number) => void;\r\n  // Added: allow App to control/read speed mode\r\n  initialSpeedMode?: SpeedMode;\r\n  onSpeedModeChange?: (mode: SpeedMode) => void;\r\n  // Style/Scene descriptors and toggles\r\n  styleDesc?: string;\r\n  sceneDesc?: string;\r\n  useStyle?: boolean;\r\n  useScene?: boolean;\r\n  onToggleStyle?: (v: boolean) => void;\r\n  onToggleScene?: (v: boolean) => void;\r\n}\r\n\r\nexport default function DM2PromptEditor({ onSend, onClear, initialText, onResizeStart, onResizeEnd, initialSpeedMode, onSpeedModeChange, styleDesc = \"\", sceneDesc = \"\", useStyle = true, useScene = true, onToggleStyle, onToggleScene }: DM2PromptEditorProps) {\r\n  const [rewriteStyle, setRewriteStyle] = useState<RewriteStyle>('Descriptive');\r\n  const [speedMode, setSpeedMode] = useState<SpeedMode>('Fast');\r\n  const [autoRefine, setAutoRefine] = useState<boolean>(true);\r\n  const [promptCount, setPromptCount] = useState<number>(1);\r\n  const [draft, setDraft] = useState<boolean>(false);\r\n  const [text, setText] = useState<string>('');\r\n  const [editorHeight, setEditorHeight] = useState<number>(200);\r\n\r\n  useEffect(() => {\r\n    if (typeof initialText !== 'undefined') {\r\n      setText(initialText);\r\n    }\r\n  }, [initialText]);\r\n\r\n  // Sync incoming speed mode from parent if provided\r\n  useEffect(() => {\r\n    if (typeof initialSpeedMode !== 'undefined') {\r\n      setSpeedMode(initialSpeedMode);\r\n    }\r\n  }, [initialSpeedMode]);\r\n\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n  const dragState = useRef({\r\n    pressed: false,\r\n    dragging: false,\r\n    startX: 0,\r\n    startY: 0,\r\n    scrollLeft: 0,\r\n    scrollTop: 0,\r\n  });\r\n  const resizeState = useRef({\r\n    pressed: false,\r\n    dragging: false,\r\n    startY: 0,\r\n    startHeight: 0,\r\n  });\r\n  const minHeight = 0;\r\n  const maxHeight = 600;\r\n\r\n  useEffect(() => {\r\n    // Pointer events are used directly on the textarea; no window listeners needed.\r\n  }, []);\r\n\r\n  const onTextAreaPointerDown = (e: React.PointerEvent<HTMLTextAreaElement>) => {\r\n    if (e.button !== 0) return;\r\n    const el = textareaRef.current;\r\n    if (!el) return;\r\n    dragState.current.pressed = true;\r\n    dragState.current.dragging = false;\r\n    dragState.current.startX = e.clientX;\r\n    dragState.current.startY = e.clientY;\r\n    dragState.current.scrollTop = el.scrollTop;\r\n    dragState.current.scrollLeft = el.scrollLeft;\r\n    // Use pointer capture to reliably receive move/up events\r\n    (el as any).setPointerCapture?.(e.pointerId);\r\n  };\r\n\r\n  const onTextAreaPointerMove = (e: React.PointerEvent<HTMLTextAreaElement>) => {\r\n    const el = textareaRef.current;\r\n    if (!el || !dragState.current.pressed) return;\r\n    const dx = e.clientX - dragState.current.startX;\r\n    const dy = e.clientY - dragState.current.startY;\r\n\r\n    if (!dragState.current.dragging) {\r\n      if (Math.abs(dx) > 4 || Math.abs(dy) > 4) {\r\n        dragState.current.dragging = true;\r\n        el.style.userSelect = 'none';\r\n        el.style.cursor = 'grabbing';\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n\r\n    // prevent text selection while dragging\r\n    e.preventDefault();\r\n    el.scrollTop = dragState.current.scrollTop - dy;\r\n    el.scrollLeft = dragState.current.scrollLeft - dx;\r\n  };\r\n\r\n  const onTextAreaPointerUp = (e: React.PointerEvent<HTMLTextAreaElement>) => {\r\n    const el = textareaRef.current;\r\n    dragState.current.pressed = false;\r\n    dragState.current.dragging = false;\r\n    if (el) {\r\n      el.style.userSelect = 'text';\r\n      el.style.cursor = 'grab';\r\n      (el as any).releasePointerCapture?.(e.pointerId);\r\n    }\r\n  };\r\n\r\n  const onGripPointerDown = (e: React.PointerEvent<HTMLDivElement>) => {\r\n    const el = e.currentTarget as HTMLDivElement;\r\n    resizeState.current.pressed = true;\r\n    resizeState.current.dragging = false;\r\n    resizeState.current.startY = e.clientY;\r\n    resizeState.current.startHeight = editorHeight;\r\n    (el as any).setPointerCapture?.(e.pointerId);\r\n    document.body.style.userSelect = 'none';\r\n    onResizeStart?.();\r\n  };\r\n  const onGripPointerMove = (e: React.PointerEvent<HTMLDivElement>) => {\r\n    if (!resizeState.current.pressed) return;\r\n    const dy = e.clientY - resizeState.current.startY;\r\n    if (!resizeState.current.dragging) {\r\n      if (Math.abs(dy) <= 4) return;\r\n      resizeState.current.dragging = true;\r\n    }\r\n    e.preventDefault();\r\n    const next = Math.max(minHeight, Math.min(maxHeight, resizeState.current.startHeight + dy));\r\n    setEditorHeight(next);\r\n  };\r\n  const onGripPointerUp = (e: React.PointerEvent<HTMLDivElement>) => {\r\n    const el = e.currentTarget as HTMLDivElement;\r\n    resizeState.current.pressed = false;\r\n    resizeState.current.dragging = false;\r\n    (el as any).releasePointerCapture?.(e.pointerId);\r\n    document.body.style.userSelect = 'auto';\r\n    onResizeEnd?.(editorHeight);\r\n  };\r\n\r\n  const isSendDisabled = useMemo(() => text.trim().length === 0, [text]);\r\n\r\n  const handleSend = () => {\r\n    // Stub rewrite: build final prompt matching controls\r\n    const header = `[${rewriteStyle} | ${speedMode}${autoRefine ? ' +AutoRefine' : ''} | count:${promptCount}${draft ? ' | draft' : ''}]`;\r\n    const finalPrompt = `${header}\\n\\n${text.trim()}`;\r\n    onSend(finalPrompt);\r\n  };\r\n\r\n  const handleClear = () => {\r\n    // Clear only the editor controls and text\r\n    setText('');\r\n    setDraft(false);\r\n    setPromptCount(1);\r\n    setAutoRefine(true);\r\n    setSpeedMode('Fast');\r\n    setRewriteStyle('Descriptive');\r\n    setEditorHeight(200);\r\n    onSpeedModeChange?.('Fast');\r\n  };\r\n\r\n  const handleClearAll = () => {\r\n    // Delegate full app-wide clearing to parent\r\n    onClear?.();\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-panel dark:bg-dark-panel rounded-xl border-2 border-border dark:border-dark-border p-4 flex flex-col h-full\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <h3 className=\"text-sm font-semibold text-text-primary dark:text-dark-text-primary\">Prompt Editor</h3>\r\n      </div>\r\n\r\n      <div className=\"mt-2 flex-1 overflow-y-auto no-scrollbar space-y-3\">\r\n\r\n      {/* Rewrite Style */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <label className=\"text-xs text-text-secondary dark:text-dark-text-secondary\">Rewrite Style</label>\r\n        <select\r\n          value={rewriteStyle}\r\n          onChange={(e) => setRewriteStyle(e.target.value as RewriteStyle)}\r\n          className=\"rounded-md bg-panel-secondary dark:bg-dark-panel-secondary text-text-primary dark:text-dark-text-primary border border-border dark:border-dark-border text-sm px-2 py-1\"\r\n        >\r\n          <option>Descriptive</option>\r\n          <option>Concise</option>\r\n          <option>Marketing</option>\r\n          <option>Technical</option>\r\n        </select>\r\n      </div>\r\n\r\n      {/* Speed Mode */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <label className=\"text-xs text-text-secondary dark:text-dark-text-secondary\">Speed Mode</label>\r\n        <div className=\"flex gap-2\">\r\n          {(['Fast', 'Quality'] as SpeedMode[]).map((m) => (\r\n            <button\r\n              key={m}\r\n              onClick={() => { setSpeedMode(m); onSpeedModeChange?.(m); }}\r\n              className={`px-3 py-1 rounded-full text-xs border-2 border-border dark:border-dark-border transition ${\r\n                speedMode === m ? 'bg-brand-accent text-white' : 'bg-panel-secondary dark:bg-dark-panel-secondary text-text-primary dark:text-dark-text-primary'\r\n              }`}\r\n            >\r\n              {m}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Auto Refine */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <label className=\"text-xs text-text-secondary dark:text-dark-text-secondary\">Auto Refine (Quality)</label>\r\n        <div className=\"flex gap-2\">\r\n          {['Off', 'On'].map((label) => {\r\n            const active = (label === 'On' ? autoRefine : !autoRefine);\r\n            return (\r\n              <button\r\n                key={label}\r\n                onClick={() => setAutoRefine(label === 'On')}\r\n                className={`px-3 py-1 rounded-full text-xs border-2 border-border dark:border-dark-border transition ${\r\n                  active ? 'bg-brand-accent text-white' : 'bg-panel-secondary dark:bg-dark-panel-secondary text-text-primary dark:text-dark-text-primary'\r\n                }`}\r\n              >\r\n                {label}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Prompt Count */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <label className=\"text-xs text-text-secondary dark:text-dark-text-secondary\">Prompt Count</label>\r\n        <div className=\"flex items-center gap-2\">\r\n          <button\r\n            onClick={() => setPromptCount((c) => Math.max(1, c - 1))}\r\n            className=\"w-7 h-7 rounded-full bg-panel-secondary dark:bg-dark-panel-secondary border-2 border-border dark:border-dark-border text-text-primary dark:text-dark-text-primary\"\r\n          >\r\n            −\r\n          </button>\r\n          <span className=\"text-sm font-medium text-text-primary dark:text-dark-text-primary\">{promptCount}</span>\r\n          <button\r\n            onClick={() => setPromptCount((c) => Math.min(99, c + 1))}\r\n            className=\"w-7 h-7 rounded-full bg-panel-secondary dark:bg-dark-panel-secondary border-2 border-border dark:border-dark-border text-text-primary dark:text-dark-text-primary\"\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Draft toggle */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <label className=\"text-xs text-text-secondary dark:text-dark-text-secondary\">Draft</label>\r\n        <div className=\"flex gap-2\">\r\n          {['Off', 'On'].map((label) => {\r\n            const active = (label === 'On' ? draft : !draft);\r\n            return (\r\n              <button\r\n                key={label}\r\n                onClick={() => setDraft(label === 'On')}\r\n                className={`px-3 py-1 rounded-full text-xs border-2 border-border dark:border-dark-border transition ${\r\n                  active ? 'bg-brand-accent text-white' : 'bg-panel-secondary dark:bg-dark-panel-secondary text-text-primary dark:text-dark-text-primary'\r\n                }`}\r\n              >\r\n                {label}\r\n              </button>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Textarea */}\r\n      <div className=\"-mt-1\">\r\n        <label className=\"text-xs text-text-secondary dark:text-dark-text-secondary\">Enter your prompt here...</label>\r\n        <textarea\r\n          ref={textareaRef}\r\n          value={text}\r\n          onChange={(e) => setText(e.target.value)}\r\n          onPointerDown={onTextAreaPointerDown}\r\n          onPointerMove={onTextAreaPointerMove}\r\n          onPointerUp={onTextAreaPointerUp}\r\n          className=\"w-full rounded-lg bg-dark-background/70 text-dark-text-primary placeholder:text-dark-text-secondary border-2 border-dark-border mt-1 pt-0 px-2 pb-2 text-[12px] resize-none overflow-y-auto no-scrollbar cursor-text\"\r\n          style={{ height: editorHeight }}\r\n          placeholder=\"Enter your prompt here...\"\r\n        />\r\n        <div\r\n          aria-label=\"Drag to open/resize editor\"\r\n          onPointerDown={onGripPointerDown}\r\n          onPointerMove={onGripPointerMove}\r\n          onPointerUp={onGripPointerUp}\r\n          className=\"mt-1 h-4 w-full rounded-md bg-panel-secondary dark:bg-dark-panel-secondary border-2 border-border dark:border-dark-border flex items-center justify-center cursor-ns-resize select-none\"\r\n          style={{ touchAction: 'none' }}\r\n        >\r\n          <div className=\"w-10 h-[2px] rounded bg-border dark:bg-dark-border\" />\r\n        </div>\r\n\r\n      </div>\r\n\r\n      </div>\r\n\r\n      {/* Footer buttons */}\r\n      <div className=\"mt-auto pt-2 flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <button\r\n            onClick={handleClear}\r\n            className=\"px-2 py-1 text-sm rounded-lg bg-background dark:bg-dark-background border-2 border-border dark:border-dark-border text-text-primary dark:text-dark-text-primary\"\r\n          >\r\n            Clear\r\n          </button>\r\n          <button\r\n            onClick={handleClearAll}\r\n            className=\"px-2 py-1 text-sm rounded-lg bg-background dark:bg-dark-background border-2 border-border dark:border-dark-border text-text-primary dark:text-dark-text-primary\"\r\n            title=\"Clear all panels: editor, images, and prompt\"\r\n          >\r\n            Clear All\r\n          </button>\r\n        </div>\r\n        <button\r\n          disabled={isSendDisabled}\r\n          onClick={handleSend}\r\n          className=\"px-3 py-1 text-sm rounded-lg bg-brand-accent hover:bg-brand-accent/90 text-white font-medium disabled:opacity-60\"\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n      {/* Style/Scene chips */}\r\n      {(styleDesc || sceneDesc) && (\r\n        <div className=\"flex flex-wrap items-center gap-2\">\r\n          {styleDesc && (\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => onToggleStyle?.(!useStyle)}\r\n              className={`px-3 py-1 rounded-full text-xs border-2 border-border dark:border-dark-border transition ${useStyle ? 'bg-brand-accent text-white' : 'bg-panel-secondary dark:bg-dark-panel-secondary text-text-primary dark:text-dark-text-primary'}`}\r\n              title=\"Toggle style descriptor\"\r\n            >\r\n              {useStyle ? `Style: ${styleDesc}` : 'Style (off)'}\r\n            </button>\r\n          )}\r\n          {sceneDesc && (\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => onToggleScene?.(!useScene)}\r\n              className={`px-3 py-1 rounded-full text-xs border-2 border-border dark:border-dark-border transition ${useScene ? 'bg-brand-accent text-white' : 'bg-panel-secondary dark:bg-dark-panel-secondary text-text-primary dark:text-dark-text-primary'}`}\r\n              title=\"Toggle scene descriptor\"\r\n            >\r\n              {useScene ? `Scene: ${sceneDesc}` : 'Scene (off)'}\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\ImageDropZone.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'images' is defined but never used. Allowed unused args must match /^_/u.","line":36,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onRunAnalysis' is defined but never used. Allowed unused args must match /^_/u.","line":38,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":38,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isAnalyzing' is defined but never used. Allowed unused args must match /^_/u.","line":39,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'autoAnalyze' is defined but never used. Allowed unused args must match /^_/u.","line":41,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":41,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onAutoAnalyzeChange' is defined but never used. Allowed unused args must match /^_/u.","line":42,"column":3,"nodeType":"Identifier","messageId":"unusedVar","endLine":42,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fileInputRef' is assigned a value but never used.","line":66,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":66,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isDragOver' is assigned a value but never used.","line":71,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'previewImage' is assigned a value but never used.","line":75,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleDrop' is assigned a value but never used.","line":113,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":113,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleDragOver' is assigned a value but never used.","line":119,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":119,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleDragLeave' is assigned a value but never used.","line":124,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":124,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleClearGeneralClick' is assigned a value but never used.","line":180,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":180,"endColumn":32},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":1,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":223,"column":15,"nodeType":"JSXOpeningElement","endLine":233,"endColumn":16},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":1,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":223,"column":15,"nodeType":"JSXOpeningElement","endLine":233,"endColumn":16},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":1,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":325,"column":15,"nodeType":"JSXOpeningElement","endLine":335,"endColumn":16},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":1,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":325,"column":15,"nodeType":"JSXOpeningElement","endLine":335,"endColumn":16},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":1,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":427,"column":15,"nodeType":"JSXOpeningElement","endLine":437,"endColumn":16},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":1,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":427,"column":15,"nodeType":"JSXOpeningElement","endLine":437,"endColumn":16}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useState } from 'react';\r\n\r\ninterface ImageDropZoneProps {\r\n  images: File[];\r\n  onImagesChange: (images: File[]) => void;\r\n  onRunAnalysis: () => void;\r\n  isAnalyzing: boolean;\r\n  onClearGeneral?: () => void;\r\n  autoAnalyze: boolean;\r\n  onAutoAnalyzeChange: (enabled: boolean) => void;\r\n  subjectImages: File[];\r\n  onSubjectImagesChange: (images: File[]) => void;\r\n  onRunSubjectAnalysis: () => void;\r\n  isAnalyzingSubject: boolean;\r\n  subjectPreview?: string;\r\n  autoAnalyzeSubject: boolean;\r\n  onAutoAnalyzeSubjectChange: (enabled: boolean) => void;\r\n  sceneImages: File[];\r\n  onSceneImagesChange: (images: File[]) => void;\r\n  onRunSceneAnalysis: () => void;\r\n  isAnalyzingScene: boolean;\r\n  scenePreview?: string;\r\n  autoAnalyzeScene: boolean;\r\n  onAutoAnalyzeSceneChange: (enabled: boolean) => void;\r\n  styleImages: File[];\r\n  onStyleImagesChange: (images: File[]) => void;\r\n  onRunStyleAnalysis: () => void;\r\n  isAnalyzingStyle: boolean;\r\n  stylePreview?: string;\r\n  autoAnalyzeStyle: boolean;\r\n  onAutoAnalyzeStyleChange: (enabled: boolean) => void;\r\n  onAnalyzeAllStyles: () => void;\r\n}\r\n\r\nexport default function ImageDropZone({\r\n  images,\r\n  onImagesChange,\r\n  onRunAnalysis,\r\n  isAnalyzing,\r\n  onClearGeneral,\r\n  autoAnalyze,\r\n  onAutoAnalyzeChange,\r\n  subjectImages,\r\n  onSubjectImagesChange,\r\n  onRunSubjectAnalysis,\r\n  isAnalyzingSubject,\r\n  subjectPreview,\r\n  autoAnalyzeSubject,\r\n  onAutoAnalyzeSubjectChange,\r\n  sceneImages,\r\n  onSceneImagesChange,\r\n  onRunSceneAnalysis,\r\n  isAnalyzingScene,\r\n  scenePreview,\r\n  autoAnalyzeScene,\r\n  onAutoAnalyzeSceneChange,\r\n  styleImages,\r\n  onStyleImagesChange,\r\n  onRunStyleAnalysis,\r\n  isAnalyzingStyle,\r\n  stylePreview,\r\n  autoAnalyzeStyle,\r\n  onAutoAnalyzeStyleChange,\r\n  onAnalyzeAllStyles,\r\n}: ImageDropZoneProps) {\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const subjectInputRef = useRef<HTMLInputElement>(null);\r\n  const sceneInputRef = useRef<HTMLInputElement>(null);\r\n  const styleInputRef = useRef<HTMLInputElement>(null);\r\n  \r\n  const [isDragOver, setIsDragOver] = useState(false);\r\n  const [isSubjectDragOver, setIsSubjectDragOver] = useState(false);\r\n  const [isSceneDragOver, setIsSceneDragOver] = useState(false);\r\n  const [isStyleDragOver, setIsStyleDragOver] = useState(false);\r\n  const [previewImage, setPreviewImage] = useState<string | null>(null);\r\n\r\n  const handleFiles = (files: FileList) => {\r\n    const imageFiles = Array.from(files).filter(file => file.type.startsWith('image/'));\r\n    if (imageFiles.length > 0) {\r\n      onImagesChange?.(imageFiles);\r\n      \r\n      // Create preview for the first image\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        setPreviewImage(e.target?.result as string);\r\n      };\r\n      reader.readAsDataURL(imageFiles[0]);\r\n    }\r\n  };\r\n\r\n  const handleSubjectFiles = (files: FileList) => {\r\n    const imageFiles = Array.from(files).filter(file => file.type.startsWith('image/'));\r\n    if (imageFiles.length > 0) {\r\n      onSubjectImagesChange?.(imageFiles);\r\n    }\r\n  };\r\n\r\n  const handleSceneFiles = (files: FileList) => {\r\n    const imageFiles = Array.from(files).filter(file => file.type.startsWith('image/'));\r\n    if (imageFiles.length > 0) {\r\n      onSceneImagesChange?.(imageFiles);\r\n    }\r\n  };\r\n\r\n  const handleStyleFiles = (files: FileList) => {\r\n    const imageFiles = Array.from(files).filter(file => file.type.startsWith('image/'));\r\n    if (imageFiles.length > 0) {\r\n      onStyleImagesChange?.(imageFiles);\r\n    }\r\n  };\r\n\r\n  // General Analysis handlers\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n    handleFiles(e.dataTransfer.files);\r\n  };\r\n\r\n  const handleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n  };\r\n\r\n  // Subject Analysis handlers\r\n  const handleSubjectDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsSubjectDragOver(false);\r\n    handleSubjectFiles(e.dataTransfer.files);\r\n  };\r\n\r\n  const handleSubjectDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsSubjectDragOver(true);\r\n  };\r\n\r\n  const handleSubjectDragLeave = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsSubjectDragOver(false);\r\n  };\r\n\r\n  // Scene Analysis handlers\r\n  const handleSceneDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsSceneDragOver(false);\r\n    handleSceneFiles(e.dataTransfer.files);\r\n  };\r\n\r\n  const handleSceneDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsSceneDragOver(true);\r\n  };\r\n\r\n  const handleSceneDragLeave = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsSceneDragOver(false);\r\n  };\r\n\r\n  // Style Analysis handlers\r\n  const handleStyleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsStyleDragOver(false);\r\n    handleStyleFiles(e.dataTransfer.files);\r\n  };\r\n\r\n  const handleStyleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsStyleDragOver(true);\r\n  };\r\n\r\n  const handleStyleDragLeave = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    setIsStyleDragOver(false);\r\n  };\r\n\r\n  const handleClearGeneralClick = () => {\r\n    onClearGeneral?.();\r\n    setPreviewImage(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-panel dark:bg-dark-panel rounded-xl border-2 border-border dark:border-dark-border h-full flex flex-col p-2\">\r\n      {/* Three Cards Container */}\r\n      <div className=\"grid grid-cols-1 gap-2 flex-1\">\r\n          \r\n          {/* Subject Analysis Card */}\r\n          <div className=\"group relative\">\r\n            {/* Neon Glow Effect */}\r\n            <div className=\"absolute -inset-0.5 bg-gradient-to-r from-purple-500 to-purple-600 rounded-xl blur opacity-30 group-hover:opacity-50 transition duration-300\"></div>\r\n            \r\n            {/* Card Content */}\r\n            <div className=\"relative bg-panel-secondary dark:bg-dark-panel-secondary border border-purple-500/30 rounded-xl p-2.5 h-44 flex flex-col\">\r\n              {/* Header */}\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <div className=\"p-1.5 bg-purple-500/20 rounded-lg\">\r\n                  <svg className=\"w-4 h-4 text-purple-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\r\n                  </svg>\r\n                </div>\r\n                <h3 className=\"text-base font-semibold text-text-primary dark:text-dark-text-primary\">Subject Analysis</h3>\r\n                <button\r\n                  onClick={onAnalyzeAllStyles}\r\n                  disabled={!subjectImages.length && !sceneImages.length && !styleImages.length}\r\n                  className={`ml-auto px-2 py-1 text-xs font-medium rounded-full transition-all duration-300 flex items-center gap-1 ${\r\n                    (!subjectImages.length && !sceneImages.length && !styleImages.length)\r\n                      ? 'bg-gray-700 text-gray-500 cursor-not-allowed'\r\n                      : 'bg-gradient-to-r from-purple-600 to-orange-600 hover:from-purple-500 hover:to-orange-500 text-white shadow-lg hover:shadow-purple-500/25'\r\n                  }`}\r\n                  title=\"Analyze all image styles at once\"\r\n                >\r\n                  <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\r\n                  </svg>\r\n                  All Styles\r\n                </button>\r\n              </div>\r\n\r\n              {/* Drop Zone */}\r\n              <div\r\n                className={`relative border-2 border-dashed rounded-lg p-2.5 text-center transition-all duration-300 cursor-pointer flex-1 flex flex-col justify-center overflow-hidden ${\r\n                  isSubjectDragOver\r\n                    ? 'border-purple-400 bg-purple-500/10'\r\n                    : 'border-purple-500/40 hover:border-purple-400 hover:bg-purple-500/5'\r\n                }`}\r\n                onDrop={handleSubjectDrop}\r\n                onDragOver={handleSubjectDragOver}\r\n                onDragLeave={handleSubjectDragLeave}\r\n                onClick={() => subjectInputRef.current?.click()}\r\n              >\r\n                {isAnalyzingSubject && (\r\n                  <div className=\"absolute inset-0 bg-gray-900/90 flex items-center justify-center rounded-lg\">\r\n                    <div className=\"flex flex-col items-center space-y-2\">\r\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-purple-500\"></div>\r\n                      <span className=\"text-xs text-purple-300\">Analyzing…</span>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                \r\n                {!isAnalyzingSubject && (\r\n                  subjectPreview ? (\r\n                    <div className=\"flex items-center justify-between p-2 space-x-3\">\r\n                      <p className=\"text-xs text-purple-300 flex-shrink-0\">\r\n                        {subjectImages.length} image{subjectImages.length !== 1 ? 's' : ''} selected\r\n                      </p>\r\n                      <div className=\"relative flex justify-center flex-1\">\r\n                        <img \r\n                          src={subjectPreview} \r\n                          alt=\"Subject Preview\" \r\n                          className=\"max-w-full max-h-12 object-contain rounded\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"flex flex-col items-center space-y-1\">\r\n                      <svg className=\"w-4 h-4 text-purple-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\" />\r\n                      </svg>\r\n                      <p className=\"text-xs text-purple-300 font-medium\">Drop subject images here</p>\r\n                    </div>\r\n                  )\r\n                )}\r\n                \r\n                <input\r\n                  ref={subjectInputRef}\r\n                  type=\"file\"\r\n                  multiple\r\n                  accept=\"image/*\"\r\n                  className=\"hidden\"\r\n                  onChange={(e) => e.target.files && handleSubjectFiles(e.target.files)}\r\n                />\r\n              </div>\r\n\r\n              {/* Helper Text */}\r\n              <p className=\"text-xs text-gray-400 text-center mt-1 mb-2\">Focus on people, objects, characters</p>\r\n\r\n              {/* Action Row */}\r\n              <div className=\"flex items-center justify-between gap-2\">\r\n                <label className=\"flex items-center space-x-1 text-xs text-gray-300\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={autoAnalyzeSubject}\r\n                    onChange={(e) => onAutoAnalyzeSubjectChange(e.target.checked)}\r\n                    className=\"w-3 h-3 text-purple-600 bg-gray-700 border-gray-600 rounded focus:ring-purple-500 focus:ring-1\"\r\n                  />\r\n                  <span>Auto-analyze</span>\r\n                </label>\r\n                \r\n                <button\r\n                  onClick={onRunSubjectAnalysis}\r\n                  disabled={subjectImages.length === 0 || isAnalyzingSubject}\r\n                  className={`px-2 py-1 text-xs font-medium rounded-full transition-all duration-300 ${\r\n                    isAnalyzingSubject || subjectImages.length === 0\r\n                      ? 'bg-gray-700 text-gray-500 cursor-not-allowed'\r\n                      : 'bg-purple-600 hover:bg-purple-500 text-white shadow-lg hover:shadow-purple-500/25'\r\n                  }`}\r\n                >\r\n                  {isAnalyzingSubject ? 'Analyzing...' : 'Analyze Subject'}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Scene Analysis Card */}\r\n          <div className=\"group relative\">\r\n            {/* Neon Glow Effect */}\r\n            <div className=\"absolute -inset-0.5 bg-gradient-to-r from-teal-500 to-green-600 rounded-xl blur opacity-30 group-hover:opacity-50 transition duration-300\"></div>\r\n            \r\n            {/* Card Content */}\r\n            <div className=\"relative bg-panel-secondary dark:bg-dark-panel-secondary border border-teal-500/30 rounded-xl p-2.5 h-44 flex flex-col\">\r\n              {/* Header */}\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <div className=\"p-1.5 bg-teal-500/20 rounded-lg\">\r\n                  <svg className=\"w-4 h-4 text-teal-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\r\n                  </svg>\r\n                </div>\r\n                <h3 className=\"text-base font-semibold text-text-primary dark:text-dark-text-primary\">Scene Analysis</h3>\r\n              </div>\r\n\r\n              {/* Drop Zone */}\r\n              <div\r\n                className={`relative border-2 border-dashed rounded-lg p-2.5 text-center transition-all duration-300 cursor-pointer flex-1 flex flex-col justify-center overflow-hidden ${\r\n                  isSceneDragOver\r\n                    ? 'border-teal-400 bg-teal-500/10'\r\n                    : 'border-teal-500/40 hover:border-teal-400 hover:bg-teal-500/5'\r\n                }`}\r\n                onDrop={handleSceneDrop}\r\n                onDragOver={handleSceneDragOver}\r\n                onDragLeave={handleSceneDragLeave}\r\n                onClick={() => sceneInputRef.current?.click()}\r\n              >\r\n                {isAnalyzingScene && (\r\n                  <div className=\"absolute inset-0 bg-gray-900/90 flex items-center justify-center rounded-lg\">\r\n                    <div className=\"flex flex-col items-center space-y-2\">\r\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-teal-500\"></div>\r\n                      <span className=\"text-xs text-teal-300\">Analyzing…</span>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                \r\n                {!isAnalyzingScene && (\r\n                  scenePreview ? (\r\n                    <div className=\"flex items-center justify-between p-2 space-x-3\">\r\n                      <p className=\"text-xs text-teal-300 flex-shrink-0\">\r\n                        {sceneImages.length} image{sceneImages.length !== 1 ? 's' : ''} selected\r\n                      </p>\r\n                      <div className=\"relative flex justify-center flex-1\">\r\n                        <img \r\n                          src={scenePreview} \r\n                          alt=\"Scene Preview\" \r\n                          className=\"max-w-full max-h-12 object-contain rounded\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"flex flex-col items-center space-y-1\">\r\n                      <svg className=\"w-4 h-4 text-teal-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\" />\r\n                      </svg>\r\n                      <p className=\"text-xs text-teal-300 font-medium\">Drop scene images here</p>\r\n                    </div>\r\n                  )\r\n                )}\r\n                \r\n                <input\r\n                  ref={sceneInputRef}\r\n                  type=\"file\"\r\n                  multiple\r\n                  accept=\"image/*\"\r\n                  className=\"hidden\"\r\n                  onChange={(e) => e.target.files && handleSceneFiles(e.target.files)}\r\n                />\r\n              </div>\r\n\r\n              {/* Helper Text */}\r\n              <p className=\"text-xs text-gray-400 text-center mt-1 mb-2\">Focus on environments, backgrounds, settings</p>\r\n\r\n              {/* Action Row */}\r\n              <div className=\"flex items-center justify-between gap-2\">\r\n                <label className=\"flex items-center space-x-1 text-xs text-gray-300\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={autoAnalyzeScene}\r\n                    onChange={(e) => onAutoAnalyzeSceneChange(e.target.checked)}\r\n                    className=\"w-3 h-3 text-teal-600 bg-gray-700 border-gray-600 rounded focus:ring-teal-500 focus:ring-1\"\r\n                  />\r\n                  <span>Auto-analyze</span>\r\n                </label>\r\n                \r\n                <button\r\n                  onClick={onRunSceneAnalysis}\r\n                  disabled={sceneImages.length === 0 || isAnalyzingScene}\r\n                  className={`px-2 py-1 text-xs font-medium rounded-full transition-all duration-300 ${\r\n                    isAnalyzingScene || sceneImages.length === 0\r\n                      ? 'bg-gray-700 text-gray-500 cursor-not-allowed'\r\n                      : 'bg-teal-600 hover:bg-teal-500 text-white shadow-lg hover:shadow-teal-500/25'\r\n                  }`}\r\n                >\r\n                  {isAnalyzingScene ? 'Analyzing...' : 'Analyze Scene'}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Style Analysis Card */}\r\n          <div className=\"group relative\">\r\n            {/* Neon Glow Effect */}\r\n            <div className=\"absolute -inset-0.5 bg-gradient-to-r from-orange-500 to-orange-600 rounded-xl blur opacity-30 group-hover:opacity-50 transition duration-300\"></div>\r\n            \r\n            {/* Card Content */}\r\n            <div className=\"relative bg-panel-secondary dark:bg-dark-panel-secondary border border-orange-500/30 rounded-xl p-2.5 h-44 flex flex-col\">\r\n              {/* Header */}\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <div className=\"p-1.5 bg-orange-500/20 rounded-lg\">\r\n                  <svg className=\"w-4 h-4 text-orange-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z\" />\r\n                  </svg>\r\n                </div>\r\n                <h3 className=\"text-base font-semibold text-text-primary dark:text-dark-text-primary\">Style Analysis</h3>\r\n              </div>\r\n\r\n              {/* Drop Zone */}\r\n              <div\r\n                className={`relative border-2 border-dashed rounded-lg p-2.5 text-center transition-all duration-300 cursor-pointer flex-1 flex flex-col justify-center overflow-hidden ${\r\n                  isStyleDragOver\r\n                    ? 'border-orange-400 bg-orange-500/10'\r\n                    : 'border-orange-500/40 hover:border-orange-400 hover:bg-orange-500/5'\r\n                }`}\r\n                onDrop={handleStyleDrop}\r\n                onDragOver={handleStyleDragOver}\r\n                onDragLeave={handleStyleDragLeave}\r\n                onClick={() => styleInputRef.current?.click()}\r\n              >\r\n                {isAnalyzingStyle && (\r\n                  <div className=\"absolute inset-0 bg-gray-900/90 flex items-center justify-center rounded-lg\">\r\n                    <div className=\"flex flex-col items-center space-y-2\">\r\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-orange-500\"></div>\r\n                      <span className=\"text-xs text-orange-300\">Analyzing…</span>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                \r\n                {!isAnalyzingStyle && (\r\n                  stylePreview ? (\r\n                    <div className=\"flex items-center justify-between p-2 space-x-3\">\r\n                      <p className=\"text-xs text-orange-300 flex-shrink-0\">\r\n                        {styleImages.length} image{styleImages.length !== 1 ? 's' : ''} selected\r\n                      </p>\r\n                      <div className=\"relative flex justify-center flex-1\">\r\n                        <img \r\n                          src={stylePreview} \r\n                          alt=\"Style Preview\" \r\n                          className=\"max-w-full max-h-12 object-contain rounded\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"flex flex-col items-center space-y-1\">\r\n                      <svg className=\"w-4 h-4 text-orange-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\" />\r\n                      </svg>\r\n                      <p className=\"text-xs text-orange-300 font-medium\">Drop style images here</p>\r\n                    </div>\r\n                  )\r\n                )}\r\n                \r\n                <input\r\n                  ref={styleInputRef}\r\n                  type=\"file\"\r\n                  multiple\r\n                  accept=\"image/*\"\r\n                  className=\"hidden\"\r\n                  onChange={(e) => e.target.files && handleStyleFiles(e.target.files)}\r\n                />\r\n              </div>\r\n\r\n              {/* Helper Text */}\r\n              <p className=\"text-xs text-gray-400 text-center mt-1 mb-2\">Focus on artistic styles, aesthetics, moods</p>\r\n\r\n              {/* Action Row */}\r\n              <div className=\"flex items-center justify-between gap-2\">\r\n                <label className=\"flex items-center space-x-1 text-xs text-gray-300\">\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={autoAnalyzeStyle}\r\n                    onChange={(e) => onAutoAnalyzeStyleChange(e.target.checked)}\r\n                    className=\"w-3 h-3 text-orange-600 bg-gray-700 border-gray-600 rounded focus:ring-orange-500 focus:ring-1\"\r\n                  />\r\n                  <span>Auto-analyze</span>\r\n                </label>\r\n                \r\n                <button\r\n                  onClick={onRunStyleAnalysis}\r\n                  disabled={styleImages.length === 0 || isAnalyzingStyle}\r\n                  className={`px-2 py-1 text-xs font-medium rounded-full transition-all duration-300 ${\r\n                    isAnalyzingStyle || styleImages.length === 0\r\n                      ? 'bg-gray-700 text-gray-500 cursor-not-allowed'\r\n                      : 'bg-orange-600 hover:bg-orange-500 text-white shadow-lg hover:shadow-orange-500/25'\r\n                  }`}\r\n                >\r\n                  {isAnalyzingStyle ? 'Analyzing...' : 'Analyze Style'}\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\MenuHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\ProgressiveImage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\SupabaseStatus.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\V2PromptGenerator.tsx","messages":[{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":55,"column":13,"nodeType":"JSXOpeningElement","endLine":55,"endColumn":74},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":77,"column":15,"nodeType":"JSXOpeningElement","endLine":77,"endColumn":76},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3031,3034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3031,3034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":94,"column":15,"nodeType":"JSXOpeningElement","endLine":94,"endColumn":76},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3930,3933],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3930,3933],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":110,"column":15,"nodeType":"JSXOpeningElement","endLine":110,"endColumn":76},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4706,4709],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4706,4709],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":129,"column":15,"nodeType":"JSXOpeningElement","endLine":129,"endColumn":76},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5754,5757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5754,5757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":170,"column":19,"nodeType":"JSXOpeningElement","endLine":170,"endColumn":83},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":180,"column":21,"nodeType":"JSXOpeningElement","endLine":180,"endColumn":85},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":191,"column":21,"nodeType":"JSXOpeningElement","endLine":191,"endColumn":85},{"ruleId":"jsx-a11y/label-has-associated-control","severity":2,"message":"A form label must be associated with a control.","line":218,"column":21,"nodeType":"JSXOpeningElement","endLine":218,"endColumn":85},{"ruleId":"jsx-a11y/click-events-have-key-events","severity":1,"message":"Visible, non-interactive elements with click handlers must have at least one keyboard listener.","line":240,"column":19,"nodeType":"JSXOpeningElement","endLine":244,"endColumn":20},{"ruleId":"jsx-a11y/no-static-element-interactions","severity":1,"message":"Avoid non-native interactive elements. If using native HTML is not possible, add an appropriate role and support for tabbing, mouse, keyboard, and touch inputs to an interactive content element.","line":240,"column":19,"nodeType":"JSXOpeningElement","endLine":244,"endColumn":20}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { PromptGenerationOptions, PromptGenerationResult } from '../services/imageToPrompt';\nimport { PROMPT_TEMPLATES, TemplateType } from '../lib/promptTemplates';\n\ninterface V2PromptGeneratorProps {\n  v2PromptMode: boolean;\n  setV2PromptMode: (mode: boolean) => void;\n  selectedTemplate: TemplateType;\n  setSelectedTemplate: (template: TemplateType) => void;\n  v2PromptOptions: PromptGenerationOptions;\n  updateV2Options: (options: Partial<PromptGenerationOptions>) => void;\n  v2PromptResult: PromptGenerationResult | null;\n  v2PromptVariations: PromptGenerationResult[];\n  isGeneratingV2Prompt: boolean;\n  generateV2Prompt: () => void;\n  generateV2Variations: (count?: number) => void;\n  applyV2PromptVariation: (variation: PromptGenerationResult) => void;\n  hasImages: boolean;\n}\n\nconst V2PromptGenerator: React.FC<V2PromptGeneratorProps> = ({\n  v2PromptMode,\n  setV2PromptMode,\n  selectedTemplate,\n  setSelectedTemplate,\n  v2PromptOptions,\n  updateV2Options,\n  v2PromptResult,\n  v2PromptVariations,\n  isGeneratingV2Prompt,\n  generateV2Prompt,\n  generateV2Variations,\n  applyV2PromptVariation,\n  hasImages\n}) => {\n  return (\n    <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6 border border-white/20\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-white\">V2 Image-to-Prompt Generator</h3>\n        <label className=\"flex items-center space-x-2\">\n          <input\n            type=\"checkbox\"\n            checked={v2PromptMode}\n            onChange={(e) => setV2PromptMode(e.target.checked)}\n            className=\"rounded\"\n          />\n          <span className=\"text-white text-sm\">Enable V2 Mode</span>\n        </label>\n      </div>\n\n      {v2PromptMode && (\n        <div className=\"space-y-4\">\n          {/* Template Selection */}\n          <div>\n            <label className=\"block text-white text-sm font-medium mb-2\">\n              Prompt Template\n            </label>\n            <select\n              value={selectedTemplate}\n              onChange={(e) => setSelectedTemplate(e.target.value as TemplateType)}\n              className=\"w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white\"\n            >\n              {Object.entries(PROMPT_TEMPLATES).map(([key, template]) => (\n                <option key={key} value={key} className=\"bg-gray-800\">\n                  {template.name}\n                </option>\n              ))}\n            </select>\n            <p className=\"text-white/70 text-xs mt-1\">\n              {PROMPT_TEMPLATES[selectedTemplate].description}\n            </p>\n          </div>\n\n          {/* Options Configuration */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-white text-sm font-medium mb-2\">\n                Style\n              </label>\n              <select\n                value={v2PromptOptions.style || 'descriptive'}\n                onChange={(e) => updateV2Options({ style: e.target.value as any })}\n                className=\"w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white\"\n              >\n                <option value=\"creative\" className=\"bg-gray-800\">Creative</option>\n                <option value=\"technical\" className=\"bg-gray-800\">Technical</option>\n                <option value=\"artistic\" className=\"bg-gray-800\">Artistic</option>\n                <option value=\"descriptive\" className=\"bg-gray-800\">Descriptive</option>\n                <option value=\"storytelling\" className=\"bg-gray-800\">Storytelling</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-white text-sm font-medium mb-2\">\n                Length\n              </label>\n              <select\n                value={v2PromptOptions.length || 'medium'}\n                onChange={(e) => updateV2Options({ length: e.target.value as any })}\n                className=\"w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white\"\n              >\n                <option value=\"short\" className=\"bg-gray-800\">Short</option>\n                <option value=\"medium\" className=\"bg-gray-800\">Medium</option>\n                <option value=\"long\" className=\"bg-gray-800\">Long</option>\n                <option value=\"detailed\" className=\"bg-gray-800\">Detailed</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-white text-sm font-medium mb-2\">\n                Focus\n              </label>\n              <select\n                value={v2PromptOptions.focus || 'all'}\n                onChange={(e) => updateV2Options({ focus: e.target.value as any })}\n                className=\"w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white\"\n              >\n                <option value=\"all\" className=\"bg-gray-800\">All Elements</option>\n                <option value=\"composition\" className=\"bg-gray-800\">Composition</option>\n                <option value=\"colors\" className=\"bg-gray-800\">Colors</option>\n                <option value=\"mood\" className=\"bg-gray-800\">Mood</option>\n                <option value=\"subjects\" className=\"bg-gray-800\">Subjects</option>\n                <option value=\"lighting\" className=\"bg-gray-800\">Lighting</option>\n                <option value=\"style\" className=\"bg-gray-800\">Style</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-white text-sm font-medium mb-2\">\n                Use Case\n              </label>\n              <select\n                value={v2PromptOptions.useCase || 'art_generation'}\n                onChange={(e) => updateV2Options({ useCase: e.target.value as any })}\n                className=\"w-full px-3 py-2 bg-white/10 border border-white/20 rounded-md text-white\"\n              >\n                <option value=\"art_generation\" className=\"bg-gray-800\">Art Generation</option>\n                <option value=\"photography\" className=\"bg-gray-800\">Photography</option>\n                <option value=\"design\" className=\"bg-gray-800\">Design</option>\n                <option value=\"writing\" className=\"bg-gray-800\">Writing</option>\n                <option value=\"analysis\" className=\"bg-gray-800\">Analysis</option>\n              </select>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex space-x-3\">\n            <button\n              onClick={generateV2Prompt}\n              disabled={!hasImages || isGeneratingV2Prompt}\n              className=\"flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-md transition-colors\"\n            >\n              {isGeneratingV2Prompt ? 'Generating...' : 'Generate V2 Prompt'}\n            </button>\n            <button\n              onClick={() => generateV2Variations(3)}\n              disabled={!hasImages || isGeneratingV2Prompt}\n              className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 disabled:bg-gray-600 disabled:cursor-not-allowed text-white rounded-md transition-colors\"\n            >\n              Generate Variations\n            </button>\n          </div>\n\n          {/* Results Display */}\n          {v2PromptResult && (\n            <div className=\"mt-6 space-y-4\">\n              <h4 className=\"text-white font-medium\">Generated Prompt</h4>\n              <div className=\"bg-black/20 rounded-lg p-4 space-y-3\">\n                <div>\n                  <label className=\"block text-white/70 text-sm font-medium mb-1\">\n                    Main Prompt\n                  </label>\n                  <p className=\"text-white text-sm bg-white/5 rounded p-2\">\n                    {v2PromptResult.mainPrompt}\n                  </p>\n                </div>\n\n                {v2PromptResult.negativePrompt && (\n                  <div>\n                    <label className=\"block text-white/70 text-sm font-medium mb-1\">\n                      Negative Prompt\n                    </label>\n                    <p className=\"text-white text-sm bg-white/5 rounded p-2\">\n                      {v2PromptResult.negativePrompt}\n                    </p>\n                  </div>\n                )}\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-white/70 text-sm font-medium mb-1\">\n                      Style Keywords\n                    </label>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {v2PromptResult.styleKeywords.map((keyword, index) => (\n                        <span\n                          key={index}\n                          className=\"px-2 py-1 bg-blue-600/30 text-white text-xs rounded\"\n                        >\n                          {keyword}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-white/70 text-sm font-medium mb-1\">\n                      Mood: {v2PromptResult.mood}\n                    </label>\n                    <div className=\"text-white/70 text-sm\">\n                      Confidence: {Math.round(v2PromptResult.confidence * 100)}%\n                    </div>\n                  </div>\n                </div>\n\n                {v2PromptResult.suggestions.length > 0 && (\n                  <div>\n                    <label className=\"block text-white/70 text-sm font-medium mb-1\">\n                      Suggestions\n                    </label>\n                    <ul className=\"text-white text-sm space-y-1\">\n                      {v2PromptResult.suggestions.map((suggestion, index) => (\n                        <li key={index} className=\"text-white/80\">\n                          • {suggestion}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Variations Display */}\n          {v2PromptVariations.length > 0 && (\n            <div className=\"mt-6\">\n              <h4 className=\"text-white font-medium mb-3\">Prompt Variations</h4>\n              <div className=\"space-y-3\">\n                {v2PromptVariations.map((variation, index) => (\n                  <div\n                    key={index}\n                    className=\"bg-black/20 rounded-lg p-3 cursor-pointer hover:bg-black/30 transition-colors\"\n                    onClick={() => applyV2PromptVariation(variation)}\n                  >\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <span className=\"text-white/70 text-sm font-medium\">\n                        Variation {index + 1}\n                      </span>\n                      <span className=\"text-white/60 text-xs\">\n                        {Math.round(variation.confidence * 100)}% confidence\n                      </span>\n                    </div>\n                    <p className=\"text-white text-sm line-clamp-3\">\n                      {variation.mainPrompt}\n                    </p>\n                    <div className=\"flex flex-wrap gap-1 mt-2\">\n                      {variation.styleKeywords.slice(0, 3).map((keyword, kIndex) => (\n                        <span\n                          key={kIndex}\n                          className=\"px-2 py-1 bg-purple-600/30 text-white text-xs rounded\"\n                        >\n                          {keyword}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default V2PromptGenerator;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\ui\\badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst badgeVariants = cva(\r\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\r\n        secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\r\n        outline: \"text-foreground\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}\r\n\r\nfunction Badge({ className, variant, ...props }: BadgeProps) {\r\n  return <div className={cn(badgeVariants({ variant }), className)} {...props} />;\r\n}\r\n\r\nexport { Badge, badgeVariants };","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":47,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":47,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\r\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"text-primary underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\";\r\n    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />;\r\n  },\r\n);\r\nButton.displayName = \"Button\";\r\n\r\nexport { Button, buttonVariants };","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\gemini-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\guardrails.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\helpers\\gemini.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ImagePart' is defined but never used.","line":1,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TextPart' is defined but never used.","line":1,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":1,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'apiKey' is defined but never used. Allowed unused args must match /^_/u.","line":16,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2191,2194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2191,2194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ImagePart, TextPart } from \"../types/gemini\";\r\n\r\nexport interface GenerateWithImagesRESTArgs {\r\n  apiKey: string;\r\n  model: string; // e.g., \"gemini-2.0-flash\"\r\n  text: string;\r\n  imageDataUrls: string[];\r\n  generationConfig?: {\r\n    temperature?: number;\r\n    topP?: number;\r\n    topK?: number;\r\n    maxOutputTokens?: number;\r\n  };\r\n}\r\n\r\nexport async function generateWithImagesREST({ apiKey, model, text, imageDataUrls, generationConfig }: GenerateWithImagesRESTArgs): Promise<string> {\r\n  // Now calling our server endpoint instead of Google directly\r\n  const endpoint = `http://localhost:3001/api/gemini/images`;\r\n  \r\n  console.log(\"🔧 Server API Request Details:\");\r\n  console.log(\"  - Model:\", model);\r\n  console.log(\"  - Server endpoint:\", endpoint);\r\n  console.log(\"  - Images count:\", imageDataUrls.length);\r\n  console.log(\"  - Text prompt length:\", text.length);\r\n\r\n  imageDataUrls.forEach((dataUrl, index) => {\r\n    const [header, base64] = dataUrl.split(\",\");\r\n    const mime = header.replace(\"data:\", \"\").replace(\";base64\", \"\");\r\n    console.log(`  - Image ${index + 1}: ${mime}, size: ${(base64.length * 0.75 / 1024).toFixed(1)}KB`);\r\n  });\r\n\r\n  const body = {\r\n    prompt: text,\r\n    imageDataUrls,\r\n    model,\r\n    generationConfig: {\r\n      temperature: 0.9,\r\n      topP: 0.9,\r\n      topK: 40,\r\n      maxOutputTokens: 512,\r\n      ...(generationConfig ?? {}),\r\n    },\r\n  };\r\n\r\n  const res = await fetch(endpoint, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(body),\r\n  });\r\n\r\n  if (!res.ok) {\r\n    const txt = await res.text();\r\n    console.error(\"Server API error\", res.status, txt);\r\n    throw new Error(`Server API error ${res.status}: ${txt}`);\r\n  }\r\n\r\n  const json = await res.json();\r\n  console.log(\"🔍 Server response JSON:\", json);\r\n  console.log(\"🔍 Server response type:\", typeof json);\r\n  console.log(\"🔍 Server response keys:\", Object.keys(json || {}));\r\n  \r\n  const candidates = json?.candidates || [];\r\n  console.log(\"🔍 Candidates found:\", candidates.length);\r\n  console.log(\"🔍 First candidate:\", candidates[0]);\r\n  \r\n  const textOut = candidates[0]?.content?.parts?.map((p: any) => p.text).join(\"\\n\") || \"\";\r\n  console.log(\"🔍 Extracted text:\", textOut);\r\n  console.log(\"🔍 Extracted text length:\", textOut.length);\r\n  \r\n  return textOut.trim();\r\n}\r\n\r\n// Helper default model; using 1.5-flash for better stability and quota availability\r\nexport const DEFAULT_GEMINI_IMAGE_MODEL = \"gemini-2.5-flash\";","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\hooks\\useApiCache.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[168,171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[168,171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[383,386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[383,386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1138,1141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1138,1141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":56,"column":7,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":63,"endColumn":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from 'react';\r\n\r\ninterface CacheEntry<T> {\r\n  data: T;\r\n  timestamp: number;\r\n  expiresAt: number;\r\n}\r\n\r\nexport function useApiCache<T = any>(defaultTTL: number = 5 * 60 * 1000) { // 5 minutes default\r\n  const cache = useRef<Map<string, CacheEntry<T>>>(new Map());\r\n\r\n  // Generate cache key from parameters\r\n  const generateKey = useCallback((params: any[]): string => {\r\n    return JSON.stringify(params);\r\n  }, []);\r\n\r\n  // Get cached data\r\n  const get = useCallback((key: string): T | null => {\r\n    const entry = cache.current.get(key);\r\n    if (!entry) return null;\r\n\r\n    // Check if expired\r\n    if (Date.now() > entry.expiresAt) {\r\n      cache.current.delete(key);\r\n      return null;\r\n    }\r\n\r\n    return entry.data;\r\n  }, []);\r\n\r\n  // Set cached data\r\n  const set = useCallback((key: string, data: T, ttl: number = defaultTTL): void => {\r\n    const entry: CacheEntry<T> = {\r\n      data,\r\n      timestamp: Date.now(),\r\n      expiresAt: Date.now() + ttl\r\n    };\r\n    cache.current.set(key, entry);\r\n  }, [defaultTTL]);\r\n\r\n  // Cached function wrapper\r\n  const withCache = useCallback(<Args extends any[], Return>(\r\n    fn: (...args: Args) => Promise<Return>,\r\n    ttl: number = defaultTTL\r\n  ) => {\r\n    return async (...args: Args): Promise<Return> => {\r\n      const key = generateKey(args);\r\n      \r\n      // Try to get from cache first\r\n      const cached = get(key) as Return;\r\n      if (cached !== null) {\r\n        return cached;\r\n      }\r\n\r\n      // Execute function and cache result\r\n      try {\r\n        const result = await fn(...args);\r\n        set(key, result as T, ttl);\r\n        return result;\r\n      } catch (error) {\r\n        // Don't cache errors\r\n        throw error;\r\n      }\r\n    };\r\n  }, [generateKey, get, set, defaultTTL]);\r\n\r\n  // Clear cache\r\n  const clear = useCallback((pattern?: string): void => {\r\n    if (!pattern) {\r\n      cache.current.clear();\r\n      return;\r\n    }\r\n\r\n    // Clear entries matching pattern\r\n    for (const [key] of cache.current) {\r\n      if (key.includes(pattern)) {\r\n        cache.current.delete(key);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Clear expired entries\r\n  const clearExpired = useCallback((): void => {\r\n    const now = Date.now();\r\n    for (const [key, entry] of cache.current) {\r\n      if (now > entry.expiresAt) {\r\n        cache.current.delete(key);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Get cache stats\r\n  const getStats = useCallback(() => {\r\n    const entries = Array.from(cache.current.values());\r\n    const now = Date.now();\r\n    const expired = entries.filter(entry => now > entry.expiresAt).length;\r\n    \r\n    return {\r\n      total: cache.current.size,\r\n      expired,\r\n      active: cache.current.size - expired\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    get,\r\n    set,\r\n    withCache,\r\n    clear,\r\n    clearExpired,\r\n    getStats,\r\n    generateKey\r\n  };\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\hooks\\useDebounce.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[96,99],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[96,99],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[106,109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[106,109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[593,596],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[593,596],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[611,614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[611,614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[751,754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[751,754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from 'react';\r\n\r\nexport function useDebounce<T extends (...args: any[]) => any>(\r\n  callback: T,\r\n  delay: number\r\n): T {\r\n  const timeoutRef = useRef<NodeJS.Timeout>();\r\n\r\n  const debouncedCallback = useCallback(\r\n    (...args: Parameters<T>) => {\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n\r\n      timeoutRef.current = setTimeout(() => {\r\n        callback(...args);\r\n      }, delay);\r\n    },\r\n    [callback, delay]\r\n  ) as T;\r\n\r\n  return debouncedCallback;\r\n}\r\n\r\nexport function useDebouncedAsync<T extends (...args: any[]) => Promise<any>>(\r\n  callback: T,\r\n  delay: number\r\n): T {\r\n  const timeoutRef = useRef<NodeJS.Timeout>();\r\n  const pendingPromiseRef = useRef<Promise<any> | null>(null);\r\n\r\n  const debouncedCallback = useCallback(\r\n    (...args: Parameters<T>): Promise<ReturnType<T>> => {\r\n      return new Promise((resolve, reject) => {\r\n        if (timeoutRef.current) {\r\n          clearTimeout(timeoutRef.current);\r\n        }\r\n\r\n        // Cancel previous pending promise\r\n        if (pendingPromiseRef.current) {\r\n          pendingPromiseRef.current = null;\r\n        }\r\n\r\n        timeoutRef.current = setTimeout(async () => {\r\n          try {\r\n            const promise = callback(...args);\r\n            pendingPromiseRef.current = promise;\r\n            const result = await promise;\r\n            \r\n            // Only resolve if this is still the current promise\r\n            if (pendingPromiseRef.current === promise) {\r\n              resolve(result);\r\n              pendingPromiseRef.current = null;\r\n            }\r\n          } catch (error) {\r\n            // Only reject if this is still the current promise\r\n            if (pendingPromiseRef.current) {\r\n              reject(error);\r\n              pendingPromiseRef.current = null;\r\n            }\r\n          }\r\n        }, delay);\r\n      });\r\n    },\r\n    [callback, delay]\r\n  ) as T;\r\n\r\n  return debouncedCallback;\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\hooks\\useImageProcessor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\integrations\\supabase\\client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\lib\\geminiPrompts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\lib\\imageAnalysis.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\lib\\promptTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\lib\\systemPrompts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\metrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\model-resolver.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\models.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\prompts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\quality.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\services\\analyzeImage.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getObjectsPrompt' is defined but never used.","line":6,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getTagsPrompt' is defined but never used.","line":6,"column":46,"nodeType":"Identifier","messageId":"unusedVar","endLine":6,"endColumn":59},{"ruleId":"prefer-const","severity":2,"message":"'objects' is never reassigned. Use 'const' instead.","line":76,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":76,"endColumn":49,"fix":{"range":[2663,2734],"text":"const objects: AnalyzeImageResponse['objects'] = extractObjects(caption);"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3902,3905],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3902,3905],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { AnalyzeImageInput, AnalyzeImageResponse } from '../types/api'; \nimport { config } from '../config'; \nimport { logger } from '../logger'; \nimport { getPrimaryModel, getFallbackModel, shouldUseABTest } from '../model-resolver'; \nimport { callWithFallback, callWithShadow } from '../gemini-client'; \nimport { getCaptionPrompt, getObjectsPrompt, getTagsPrompt } from '../prompts'; \nimport { trimToDetail, extractObjects, extractTags } from '../guardrails'; \nimport { metricsStore } from '../metrics'; \nimport { randomUUID } from 'crypto'; \n\nexport async function analyzeImage( \n  input: AnalyzeImageInput, \n  headers: Record<string, string> \n): Promise<AnalyzeImageResponse> { \n  const traceId = randomUUID(); \n  const startTime = Date.now(); \n  \n  const mode = headers['x-analyze-mode'] as 'fast' | 'quality' || input.mode || 'fast'; \n  const ocrHint = headers['x-ocr-hint'] === 'true'; \n  const detail = input.options?.detail || 'medium'; \n  const wantTags = input.options?.tags || false; \n\n  // Validate input \n  if (!input.base64 && !input.imageUrl) { \n    throw new Error('Either base64 or imageUrl must be provided'); \n  } \n\n  if (input.imageUrl && !input.imageUrl.startsWith('https://')) { \n    throw new Error('Only HTTPS image URLs are allowed'); \n  } \n\n  // Validate base64 size \n  if (input.base64) { \n    const sizeBytes = Buffer.from(input.base64, 'base64').length; \n    if (sizeBytes > config.maxImageBytes) { \n      throw new Error(`Image size ${sizeBytes} exceeds limit ${config.maxImageBytes}`); \n    } \n  } \n\n  // Determine model routing \n  let primaryModel = getPrimaryModel(); \n  const fallbackModel = getFallbackModel(); \n  \n  // A/B test: randomly use Pro \n  if (shouldUseABTest()) { \n    primaryModel = fallbackModel; \n    logger.debug({ traceId }, 'A/B test: using Pro model'); \n  } \n\n  // Quality mode with long detail: prefer Pro \n  if (mode === 'quality' && detail === 'long') { \n    primaryModel = fallbackModel; \n  } \n\n  const timeout = mode === 'fast' ? config.timeoutMsFast : config.timeoutMsQuality; \n\n  const imageData = { \n    base64: input.base64, \n    mimeType: input.mimeType, \n  }; \n\n  try { \n    // Main caption call \n    const captionPrompt = getCaptionPrompt(detail, ocrHint); \n    \n    let result; \n    if (config.shadowMode && primaryModel !== fallbackModel) { \n      result = await callWithShadow(primaryModel, fallbackModel, captionPrompt, imageData, timeout); \n    } else { \n      result = await callWithFallback(primaryModel, fallbackModel, captionPrompt, imageData, timeout); \n    } \n\n    const caption = trimToDetail(result.text, detail); \n    \n    // Extract objects (simple heuristic or separate call) \n    let objects: AnalyzeImageResponse['objects'] = extractObjects(caption); \n    \n    // Extract tags if requested \n    let tags: string[] = []; \n    if (wantTags) { \n      tags = extractTags(caption); \n    } \n\n    // Determine setting (simple heuristic) \n    const setting = caption.toLowerCase().includes('indoor') ? 'indoor' : \n                    caption.toLowerCase().includes('outdoor') ? 'outdoor' : 'unknown'; \n\n    const latency = Date.now() - startTime; \n\n    // Log metrics \n    metricsStore.addRequest({ \n      trace_id: traceId, \n      endpoint: '/analyze-image', \n      mode, \n      chosen_model: primaryModel, \n      used_model: result.model, \n      fallback_used: 'fallback_used' in result ? result.fallback_used : false, \n      shadow_ran: 'shadow_result' in result && !!result.shadow_result, \n      latency_ms: latency, \n      confidence: result.confidence, \n    }); \n\n    logger.info({ \n      trace_id: traceId, \n      model: result.model, \n      latency, \n      confidence: result.confidence, \n    }, 'Image analysis complete'); \n\n    return { \n      caption, \n      objects, \n      tags, \n      setting, \n      confidence: result.confidence, \n      model: result.model, \n      raw: result.text, \n    }; \n  } catch (error: any) { \n    const latency = Date.now() - startTime; \n    \n    metricsStore.addRequest({ \n      trace_id: traceId, \n      endpoint: '/analyze-image', \n      mode, \n      chosen_model: primaryModel, \n      fallback_used: false, \n      shadow_ran: false, \n      latency_ms: latency, \n      error: error.message, \n    }); \n\n    logger.error({ trace_id: traceId, error: error.message, latency }, 'Image analysis failed'); \n    throw error; \n  } \n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\services\\gemini.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4096,4099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4096,4099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GoogleGenerativeAI } from '@google/generative-ai';\n\n// Initialize the Gemini API\nconst API_KEY = import.meta.env.VITE_GEMINI_API_KEY || '';\n\nif (!API_KEY) {\n  console.warn('VITE_GEMINI_API_KEY not found in environment variables');\n}\n\nconst genAI = new GoogleGenerativeAI(API_KEY);\n\n// Get the generative model\nconst MODEL_NAME = import.meta.env.VITE_GEMINI_MODEL_IMAGE || 'gemini-2.5-flash';\nconst model = genAI.getGenerativeModel({ model: MODEL_NAME });\n\nexport interface AnalyzeImageOptions {\n  detail?: 'short' | 'medium' | 'detailed';\n  tags?: boolean;\n  analysisType?: 'general' | 'subject' | 'scene' | 'style' | 'composition' | 'mood' | 'technical';\n  includeColors?: boolean;\n  includeLighting?: boolean;\n  includeComposition?: boolean;\n  includeMood?: boolean;\n  includeStyle?: boolean;\n  includeTechnical?: boolean;\n}\n\nexport interface AnalyzeImageResult {\n  description: string;\n  tags?: string[];\n  confidence?: number;\n  colors?: string[];\n  lighting?: string;\n  composition?: string;\n  mood?: string;\n  style?: string;\n  technical?: string;\n  objects?: string[];\n  scene?: string;\n}\n\n/**\n * Specialized function for subject analysis\n */\nexport async function analyzeSubject(\n  imageFile: File,\n  detail: 'short' | 'medium' | 'detailed' = 'medium'\n): Promise<AnalyzeImageResult> {\n  return analyzeImage(imageFile, {\n    detail,\n    analysisType: 'subject',\n    tags: true,\n    includeColors: true,\n    includeMood: true\n  });\n}\n\n/**\n * Specialized function for scene analysis\n */\nexport async function analyzeScene(\n  imageFile: File,\n  detail: 'short' | 'medium' | 'detailed' = 'medium'\n): Promise<AnalyzeImageResult> {\n  return analyzeImage(imageFile, {\n    detail,\n    analysisType: 'scene',\n    tags: true,\n    includeColors: true,\n    includeLighting: true,\n    includeComposition: true\n  });\n}\n\n/**\n * Specialized function for style analysis\n */\nexport async function analyzeStyle(\n  imageFile: File,\n  detail: 'short' | 'medium' | 'detailed' = 'medium'\n): Promise<AnalyzeImageResult> {\n  return analyzeImage(imageFile, {\n    detail,\n    analysisType: 'style',\n    tags: true,\n    includeColors: true,\n    includeStyle: true,\n    includeTechnical: true\n  });\n}\n\n/**\n * Comprehensive analysis with all features\n */\nexport async function analyzeComprehensive(\n  imageFile: File,\n  detail: 'short' | 'medium' | 'detailed' = 'detailed'\n): Promise<AnalyzeImageResult> {\n  return analyzeImage(imageFile, {\n    detail,\n    analysisType: 'general',\n    tags: true,\n    includeColors: true,\n    includeLighting: true,\n    includeComposition: true,\n    includeMood: true,\n    includeStyle: true,\n    includeTechnical: true\n  });\n}\n\n/**\n * Analyze an image using Gemini Vision\n */\nexport async function analyzeImage(\n  imageFile: File,\n  options: AnalyzeImageOptions = {}\n): Promise<AnalyzeImageResult> {\n  console.log('🔍 analyzeImage called with:', { fileName: imageFile.name, size: imageFile.size, options });\n  \n  if (!API_KEY) {\n    console.error('❌ No API key found!');\n    throw new Error('Gemini API key not configured');\n  }\n  \n  try {\n    // Convert file to base64\n    console.log('📄 Converting file to base64...');\n    const base64 = await fileToBase64(imageFile);\n    console.log('✅ Base64 conversion complete, length:', base64.length);\n    \n    // Create advanced prompt based on options\n    const prompt = createAdvancedPrompt(options);\n\n    // Prepare the image data\n    const imagePart = {\n      inlineData: {\n        data: base64,\n        mimeType: imageFile.type,\n      },\n    };\n\n    // Generate content\n    console.log('🚀 Calling Gemini API with prompt:', prompt);\n    console.log('📸 Image data prepared, mime type:', imageFile.type);\n    const result = await model.generateContent([prompt, imagePart]);\n    console.log('📡 API call completed, getting response...');\n    const response = await result.response;\n    const text = response.text();\n    console.log('✅ Response received, length:', text.length);\n\n    // Parse advanced response components\n    const parsedResult = parseAdvancedResponse(text, options);\n\n    return parsedResult;\n  } catch (error: any) {\n    console.error('Error analyzing image:', error);\n    \n    // Enhanced error handling with specific error types\n    if (error.message?.includes('429')) {\n      throw new Error('API Rate Limit: You\\'ve exceeded your Gemini API quota. Please wait a few minutes and try again.');\n    } else if (error.message?.includes('401')) {\n      throw new Error('API Authentication Error: Please check your VITE_GEMINI_API_KEY in the .env file.');\n    } else if (error.message?.includes('403')) {\n      throw new Error('API Access Forbidden: Your API key may not have access to the Gemini model.');\n    } else if (error.message?.includes('400')) {\n      throw new Error('Invalid Request: The image format may not be supported or the request is malformed.');\n    } else if (error.message?.includes('500')) {\n      throw new Error('Server Error: Gemini API is experiencing issues. Please try again later.');\n    } else {\n      throw new Error(`Image analysis failed: ${error.message || 'Unknown error occurred'}`);\n    }\n  }\n}\n\n/**\n * Generate a prompt from text description\n */\nexport async function textToPrompt(\n  intent: string,\n  style?: string,\n  constraints?: string\n): Promise<string> {\n  console.log('📝 textToPrompt called with:', { intent, style, constraints });\n  \n  try {\n    let prompt = `Convert this description into a detailed, well-structured prompt for image generation: \"${intent}\"`;\n    \n    if (style) {\n      prompt += ` Style: ${style}.`;\n    }\n    \n    if (constraints) {\n      prompt += ` Constraints: ${constraints}.`;\n    }\n     \n    prompt += ' Make the prompt clear, specific, and optimized for AI image generation.';\n     \n    console.log('🚀 Calling server API for prompt generation with:', prompt);\n    \n    // Use server endpoint instead of direct Google API call\n    const response = await fetch('http://localhost:3001/api/gemini/text', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        prompt: prompt,\n        model: 'gemini-2.5-flash'\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Server API error:', response.status, errorText);\n      throw new Error(`Server API error ${response.status}: ${errorText}`);\n    }\n\n    const result = await response.json();\n    console.log('📡 Prompt generation API call completed');\n    \n    const generatedPrompt = result.candidates?.[0]?.content?.parts?.[0]?.text || result.text || '';\n    console.log('✅ Generated prompt received, length:', generatedPrompt.length);\n    return generatedPrompt.trim();\n  } catch (error) {\n    console.error('Error generating prompt:', error);\n    throw new Error('Failed to generate prompt. Please try again.');\n  }\n}\n\n/**\n * Refine an existing prompt\n */\nexport async function refinePrompt(\n  originalPrompt: string,\n  task: 'refine' | 'simplify' | 'evaluate' = 'refine'\n): Promise<string> {\n  try {\n    let prompt = '';\n    \n    switch (task) {\n      case 'refine':\n        prompt = `Improve and refine this prompt to make it more detailed and effective: \"${originalPrompt}\"`;\n        break;\n      case 'simplify':\n        prompt = `Simplify this prompt while keeping its core meaning: \"${originalPrompt}\"`;\n        break;\n      case 'evaluate':\n        prompt = `Evaluate this prompt and provide suggestions for improvement: \"${originalPrompt}\"`;\n        break;\n    }\n\n    const result = await model.generateContent(prompt);\n    const response = await result.response;\n    return response.text();\n  } catch (error) {\n    console.error('Error refining prompt:', error);\n    throw new Error('Failed to refine prompt. Please try again.');\n  }\n}\n\n/**\n * Create advanced prompt based on analysis options\n */\nfunction createAdvancedPrompt(options: AnalyzeImageOptions): string {\n  const { detail = 'medium', analysisType = 'general', tags = false } = options;\n  \n  let basePrompt = '';\n  \n  // Base analysis type prompts\n  switch (analysisType) {\n    case 'subject':\n      basePrompt = 'Focus on analyzing the main subject(s) in this image. Describe the people, animals, or primary objects in detail, including their appearance, pose, expression, clothing, and any notable characteristics.';\n      break;\n    case 'scene':\n      basePrompt = 'Analyze the scene and environment in this image. Describe the setting, location, background elements, spatial relationships, and overall context of where this image was taken.';\n      break;\n    case 'style':\n      basePrompt = 'Analyze the artistic and visual style of this image. Focus on the aesthetic qualities, artistic techniques, visual treatment, and stylistic elements that define the image\\'s appearance.';\n      break;\n    case 'composition':\n      basePrompt = 'Analyze the composition and visual structure of this image. Focus on the arrangement of elements, rule of thirds, leading lines, symmetry, balance, framing, and overall visual organization.';\n      break;\n    case 'mood':\n      basePrompt = 'Analyze the mood, atmosphere, and emotional qualities of this image. Describe the feelings it evokes, the emotional tone, and the psychological impact of the visual elements.';\n      break;\n    case 'technical':\n      basePrompt = 'Provide a technical analysis of this image. Focus on photographic aspects like lighting quality, depth of field, exposure, color grading, sharpness, and technical execution.';\n      break;\n    default:\n      basePrompt = 'Provide a comprehensive analysis of this image covering all major visual aspects.';\n  }\n  \n  // Detail level modifications\n  if (detail === 'short') {\n    basePrompt += ' Keep your analysis concise and focused, providing key insights in 2-3 sentences.';\n  } else if (detail === 'detailed') {\n    basePrompt += ' Provide an extensive, thorough analysis with rich detail and specific observations.';\n  }\n  \n  // Add structured output requirements\n  let structuredOutput = '\\n\\nStructure your response with the following sections:\\n';\n  structuredOutput += '**Description:** Main analysis based on the focus area\\n';\n  \n  if (options.includeColors || analysisType === 'general') {\n    structuredOutput += '**Colors:** Dominant colors and color palette (list 3-5 main colors)\\n';\n  }\n  \n  if (options.includeLighting || analysisType === 'general' || analysisType === 'technical') {\n    structuredOutput += '**Lighting:** Quality, direction, and characteristics of lighting\\n';\n  }\n  \n  if (options.includeComposition || analysisType === 'composition' || analysisType === 'general') {\n    structuredOutput += '**Composition:** Visual arrangement and compositional elements\\n';\n  }\n  \n  if (options.includeMood || analysisType === 'mood' || analysisType === 'general') {\n    structuredOutput += '**Mood:** Emotional tone and atmosphere\\n';\n  }\n  \n  if (options.includeStyle || analysisType === 'style' || analysisType === 'general') {\n    structuredOutput += '**Style:** Artistic style and visual treatment\\n';\n  }\n  \n  if (options.includeTechnical || analysisType === 'technical') {\n    structuredOutput += '**Technical:** Camera settings, quality, and technical aspects\\n';\n  }\n  \n  if (tags) {\n    structuredOutput += '**Tags:** Relevant keywords and tags (comma-separated)\\n';\n  }\n  \n  return basePrompt + structuredOutput;\n}\n\n/**\n * Parse advanced response from Gemini\n */\nfunction parseAdvancedResponse(text: string, options: AnalyzeImageOptions): AnalyzeImageResult {\n  const result: AnalyzeImageResult = {\n    description: '',\n    confidence: 0.9\n  };\n  \n  // Extract main description\n  const descMatch = text.match(/\\*\\*Description:\\*\\*\\s*(.*?)(?=\\*\\*|$)/s);\n  result.description = descMatch ? descMatch[1].trim() : text.split('\\n')[0] || text;\n  \n  // Extract colors\n  const colorsMatch = text.match(/\\*\\*Colors:\\*\\*\\s*(.*?)(?=\\*\\*|$)/s);\n  if (colorsMatch) {\n    result.colors = colorsMatch[1]\n      .split(',')\n      .map(color => color.trim())\n      .filter(color => color.length > 0);\n  }\n  \n  // Extract lighting\n  const lightingMatch = text.match(/\\*\\*Lighting:\\*\\*\\s*(.*?)(?=\\*\\*|$)/s);\n  if (lightingMatch) {\n    result.lighting = lightingMatch[1].trim();\n  }\n  \n  // Extract composition\n  const compositionMatch = text.match(/\\*\\*Composition:\\*\\*\\s*(.*?)(?=\\*\\*|$)/s);\n  if (compositionMatch) {\n    result.composition = compositionMatch[1].trim();\n  }\n  \n  // Extract mood\n  const moodMatch = text.match(/\\*\\*Mood:\\*\\*\\s*(.*?)(?=\\*\\*|$)/s);\n  if (moodMatch) {\n    result.mood = moodMatch[1].trim();\n  }\n  \n  // Extract style\n  const styleMatch = text.match(/\\*\\*Style:\\*\\*\\s*(.*?)(?=\\*\\*|$)/s);\n  if (styleMatch) {\n    result.style = styleMatch[1].trim();\n  }\n  \n  // Extract technical\n  const technicalMatch = text.match(/\\*\\*Technical:\\*\\*\\s*(.*?)(?=\\*\\*|$)/s);\n  if (technicalMatch) {\n    result.technical = technicalMatch[1].trim();\n  }\n  \n  // Extract tags\n  const tagsMatch = text.match(/\\*\\*Tags:\\*\\*\\s*(.*?)(?=\\*\\*|$)/s);\n  if (tagsMatch) {\n    result.tags = tagsMatch[1]\n      .split(',')\n      .map(tag => tag.trim())\n      .filter(tag => tag.length > 0);\n  }\n  \n  // Fallback: if no structured sections found, try legacy parsing\n  if (!descMatch && options.tags && (text.includes('Tags:') || text.includes('Keywords:'))) {\n    const parts = text.split(/Tags:|Keywords:/i);\n    if (parts.length > 1) {\n      result.description = parts[0].trim();\n      result.tags = parts[1]\n        .split(',')\n        .map(tag => tag.trim())\n        .filter(tag => tag.length > 0);\n    }\n  }\n  \n  return result;\n}\n\n/**\n * Convert File to base64 string\n */\nfunction fileToBase64(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      const result = reader.result as string;\n      // Remove the data URL prefix (e.g., \"data:image/jpeg;base64,\")\n      const base64 = result.split(',')[1];\n      resolve(base64);\n    };\n    reader.onerror = error => reject(error);\n  });\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\services\\imageToPrompt.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[753,756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[753,756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCase' is assigned a value but never used.","line":113,"column":70,"nodeType":"Identifier","messageId":"unusedVar","endLine":113,"endColumn":77},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used. Allowed unused args must match /^_/u.","line":172,"column":49,"nodeType":"Identifier","messageId":"unusedVar","endLine":172,"endColumn":81}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { GoogleGenerativeAI } from '@google/generative-ai';\nimport { config } from '../config';\n\nexport interface PromptGenerationOptions {\n  style?: 'creative' | 'technical' | 'artistic' | 'descriptive' | 'storytelling';\n  length?: 'short' | 'medium' | 'long' | 'detailed';\n  focus?: 'composition' | 'colors' | 'mood' | 'subjects' | 'lighting' | 'style' | 'all';\n  useCase?: 'art_generation' | 'photography' | 'design' | 'writing' | 'analysis';\n}\n\nexport interface PromptGenerationResult {\n  mainPrompt: string;\n  negativePrompt?: string;\n  styleKeywords: string[];\n  technicalDetails: string[];\n  mood: string;\n  confidence: number;\n  suggestions: string[];\n}\n\nexport class ImageToPromptService {\n  private genAI: GoogleGenerativeAI;\n  private model: any;\n\n  constructor() {\n    if (!config.geminiApiKey) {\n      throw new Error('Gemini API key is required for image-to-prompt functionality');\n    }\n    \n    this.genAI = new GoogleGenerativeAI(config.geminiApiKey);\n    this.model = this.genAI.getGenerativeModel({ \n      model: 'gemini-2.5-pro' \n    });\n  }\n\n  /**\n   * Generate a comprehensive prompt from an image\n   */\n  async generatePrompt(\n    imageData: string, \n    mimeType: string, \n    options: PromptGenerationOptions = {}\n  ): Promise<PromptGenerationResult> {\n    try {\n      console.log('🔍 V2 generatePrompt called with:', { \n        imageDataLength: imageData.length, \n        mimeType, \n        options \n      });\n      \n      const promptTemplate = this.buildPromptTemplate(options);\n      console.log('📝 V2 prompt template:', promptTemplate);\n      \n      console.log('🚀 V2 calling Gemini API...');\n      const result = await this.model.generateContent([\n        promptTemplate,\n        {\n          inlineData: {\n            data: imageData,\n            mimeType: mimeType\n          }\n        }\n      ]);\n\n      console.log('📡 V2 API call completed');\n      const response = result.response.text();\n      console.log('✅ V2 raw response received, length:', response.length);\n      console.log('📄 V2 raw response content:', response);\n      \n      const parsedResult = this.parsePromptResponse(response, options);\n      console.log('🎯 V2 parsed result:', parsedResult);\n      \n      return parsedResult;\n    } catch (error) {\n      console.error('❌ V2 Error generating prompt from image:', error);\n      throw new Error(`Failed to generate prompt: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Generate multiple prompt variations from a single image\n   */\n  async generatePromptVariations(\n    imageData: string,\n    mimeType: string,\n    count: number = 3,\n    options: PromptGenerationOptions = {}\n  ): Promise<PromptGenerationResult[]> {\n    const variations: PromptGenerationResult[] = [];\n    \n    for (let i = 0; i < count; i++) {\n      const variationOptions = {\n        ...options,\n        style: this.getRandomStyle(),\n        focus: this.getRandomFocus()\n      };\n      \n      try {\n        const result = await this.generatePrompt(imageData, mimeType, variationOptions);\n        variations.push(result);\n      } catch (error) {\n        console.error(`Error generating variation ${i + 1}:`, error);\n      }\n    }\n    \n    return variations;\n  }\n\n  /**\n   * Build the prompt template based on options\n   */\n  private buildPromptTemplate(options: PromptGenerationOptions): string {\n    const { style = 'descriptive', length = 'medium', focus = 'all', useCase = 'art_generation' } = options;\n\n    let basePrompt = `Analyze this image and create a detailed prompt that could be used to recreate or inspire similar content using AI image generation tools. `;\n\n    // Add style-specific instructions\n    switch (style) {\n      case 'creative':\n        basePrompt += `Focus on creative and imaginative descriptions that inspire artistic interpretation. `;\n        break;\n      case 'technical':\n        basePrompt += `Include technical details about composition, lighting, camera settings, and visual techniques. `;\n        break;\n      case 'artistic':\n        basePrompt += `Emphasize artistic elements, style, mood, and aesthetic qualities. `;\n        break;\n      case 'storytelling':\n        basePrompt += `Create a narrative description that tells the story within the image. `;\n        break;\n      default:\n        basePrompt += `Provide a balanced, descriptive analysis of all visual elements. `;\n    }\n\n    // Add length specifications\n    switch (length) {\n      case 'short':\n        basePrompt += `Keep the description concise and focused (50-100 words). `;\n        break;\n      case 'long':\n        basePrompt += `Provide an extensive, detailed description (200-300 words). `;\n        break;\n      case 'detailed':\n        basePrompt += `Give a comprehensive, in-depth analysis (300+ words). `;\n        break;\n      default:\n        basePrompt += `Provide a moderate length description (100-200 words). `;\n    }\n\n    // Add focus-specific instructions\n    if (focus !== 'all') {\n      basePrompt += `Pay special attention to ${focus.replace('_', ' ')}. `;\n    }\n\n    basePrompt += `\n\nCreate a clear, specific, and detailed prompt that captures the essence of this image. The prompt should be optimized for AI image generation and include relevant details about:\n- Subject matter and composition\n- Visual style and artistic elements\n- Lighting and atmosphere\n- Colors and mood\n- Technical aspects if relevant\n\nProvide only the prompt text, without additional formatting or explanations.`;\n\n    return basePrompt;\n  }\n\n  /**\n   * Parse the AI response into structured format\n   */\n  private parsePromptResponse(response: string, options: PromptGenerationOptions): PromptGenerationResult {\n    console.log('🔍 V2 parsePromptResponse called with response length:', response.length);\n    \n    // Clean up the response text\n    const cleanedResponse = response.trim();\n    console.log('📝 V2 Using direct text parsing for prompt');\n    \n    // Create structured response from the text prompt\n    const result = {\n      mainPrompt: cleanedResponse,\n      styleKeywords: this.extractKeywords(cleanedResponse),\n      technicalDetails: [],\n      mood: this.extractMood(cleanedResponse),\n      confidence: 0.8,\n      suggestions: []\n    };\n    \n    console.log('🎯 V2 structured result:', result);\n    return result;\n  }\n\n  /**\n   * Extract keywords from text response\n   */\n  private extractKeywords(text: string): string[] {\n    const keywords: string[] = [];\n    const commonArtTerms = [\n      'vibrant', 'muted', 'bright', 'dark', 'colorful', 'monochrome',\n      'detailed', 'minimalist', 'abstract', 'realistic', 'stylized',\n      'dramatic', 'soft', 'sharp', 'blurred', 'focused'\n    ];\n\n    commonArtTerms.forEach(term => {\n      if (text.toLowerCase().includes(term)) {\n        keywords.push(term);\n      }\n    });\n\n    return keywords.slice(0, 5); // Limit to 5 keywords\n  }\n\n  /**\n   * Extract mood from text response\n   */\n  private extractMood(text: string): string {\n    const moodTerms = {\n      'cheerful': ['bright', 'vibrant', 'happy', 'joyful', 'cheerful', 'sunny'],\n      'dramatic': ['dramatic', 'intense', 'bold', 'striking', 'powerful'],\n      'peaceful': ['calm', 'peaceful', 'serene', 'tranquil', 'gentle', 'soft'],\n      'mysterious': ['dark', 'mysterious', 'shadowy', 'enigmatic', 'moody'],\n      'energetic': ['dynamic', 'energetic', 'active', 'lively', 'vibrant']\n    };\n\n    const lowerText = text.toLowerCase();\n    \n    for (const [mood, terms] of Object.entries(moodTerms)) {\n      if (terms.some(term => lowerText.includes(term))) {\n        return mood;\n      }\n    }\n\n    return 'neutral';\n  }\n\n  /**\n   * Get random style for variations\n   */\n  private getRandomStyle(): PromptGenerationOptions['style'] {\n    const styles: PromptGenerationOptions['style'][] = ['creative', 'technical', 'artistic', 'descriptive', 'storytelling'];\n    return styles[Math.floor(Math.random() * styles.length)];\n  }\n\n  /**\n   * Get random focus for variations\n   */\n  private getRandomFocus(): PromptGenerationOptions['focus'] {\n    const focuses: PromptGenerationOptions['focus'][] = ['composition', 'colors', 'mood', 'subjects', 'lighting', 'style'];\n    return focuses[Math.floor(Math.random() * focuses.length)];\n  }\n\n  /**\n   * Convert image file to base64 data\n   */\n  static async fileToBase64(file: File): Promise<{ data: string; mimeType: string }> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const result = reader.result as string;\n        const base64Data = result.split(',')[1]; // Remove data:image/...;base64, prefix\n        resolve({\n          data: base64Data,\n          mimeType: file.type\n        });\n      };\n      reader.onerror = reject;\n      reader.readAsDataURL(file);\n    });\n  }\n\n  /**\n   * Batch process multiple images\n   */\n  async batchGeneratePrompts(\n    images: { data: string; mimeType: string }[],\n    options: PromptGenerationOptions = {}\n  ): Promise<PromptGenerationResult[]> {\n    const results: PromptGenerationResult[] = [];\n    \n    for (const image of images) {\n      try {\n        const result = await this.generatePrompt(image.data, image.mimeType, options);\n        results.push(result);\n        \n        // Add small delay to avoid rate limiting\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      } catch (error) {\n        console.error('Error in batch processing:', error);\n        // Continue with other images even if one fails\n      }\n    }\n    \n    return results;\n  }\n}\n\n// Export singleton instance\nexport const imageToPromptService = new ImageToPromptService();","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\services\\promptApi.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1411,1414],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1411,1414],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3486,3489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3486,3489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3526,3529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3526,3529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3703,3706],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3703,3706],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5461,5464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5461,5464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6081,6084],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6081,6084],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":179,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8091,8094],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8091,8094],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":179,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8131,8134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8131,8134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8314,8317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8314,8317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export async function generateWithGemini(inputText: string, model?: string, allowFallback: boolean = true, temperature?: number): Promise<string> {\r\n  const apiKey = import.meta.env.VITE_GEMINI_API_KEY as string | undefined;\r\n  console.log('Gemini API Key exists:', Boolean(apiKey));\r\n  console.log('Gemini API Key length:', apiKey?.length ?? 0);\r\n  const isPlaceholderKey = !!apiKey && (apiKey.includes('YOUR_API_KEY') || apiKey.includes('PLACEHOLDER') || apiKey === 'VITE_GEMINI_API_KEY');\r\n  if (!apiKey || isPlaceholderKey) {\r\n    console.info('ℹ️ No Gemini API key configured - using enhanced prompt fallback (this is normal)');\r\n    if (allowFallback) {\r\n      const generic = inputText + ' — photorealistic, soft studio lighting, shallow depth of field, 50mm lens, balanced composition, high detail.';\r\n      return generic.trim();\r\n    }\r\n    throw new Error('Missing or placeholder VITE_GEMINI_API_KEY');\r\n  }\r\n\r\n  const chosenModel = model || (import.meta.env.VITE_GEMINI_MODEL_TEXT as string | undefined) || 'gemini-2.5-flash';\r\n  console.log('Gemini text: Using model:', chosenModel);\r\n  console.log('Gemini text: Input text length:', inputText?.length ?? 0);\r\n  if (temperature !== undefined) {\r\n    console.log('Gemini text: Using temperature:', temperature);\r\n  }\r\n  const url = `https://generativelanguage.googleapis.com/v1/models/${chosenModel}:generateContent?key=${apiKey}`;\r\n\r\n  const body: any = {\r\n    contents: [{ role: 'user', parts: [{ text: inputText }] }]\r\n  };\r\n\r\n  // Add generation config if temperature is specified\r\n  if (temperature !== undefined) {\r\n    body.generationConfig = {\r\n      temperature: Math.max(0.0, Math.min(2.0, temperature)), // Clamp between 0.0 and 2.0\r\n      topP: 0.95,\r\n      topK: 40\r\n    };\r\n  }\r\n\r\n  const res = await fetch(url, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(body)\r\n  });\r\n\r\n  // Enhanced error-aware fallback: if access/not-found, try 2.5→1.5 and flash→pro\r\n  if (!res.ok) {\r\n    const errText = await res.text();\r\n    console.error('Gemini text error:', res.status, errText);\r\n    if (/API key not valid/i.test(errText) || /INVALID_ARGUMENT/i.test(errText)) {\r\n      if (allowFallback) {\r\n        console.warn('Gemini API key invalid; returning generic fallback');\r\n        const generic = inputText + ' — photorealistic, soft studio lighting, shallow depth of field, 50mm lens, balanced composition, high detail.';\r\n        return generic.trim();\r\n      }\r\n      throw new Error('Gemini API key is invalid or not configured.');\r\n    }\r\n    if (allowFallback) {\r\n      const isAccessOrNotFound = res.status === 403 || res.status === 404 || /permission|access|not\\s*found|unsupported|model/i.test(errText);\r\n      if (isAccessOrNotFound) {\r\n        let fallbackModel = chosenModel;\r\n        if (fallbackModel.includes('2.5')) fallbackModel = fallbackModel.replace('2.5', '1.5');\r\n        if (fallbackModel.includes('flash')) fallbackModel = fallbackModel.replace('flash', 'pro');\r\n        if (fallbackModel !== chosenModel) {\r\n          return generateWithGemini(inputText, fallbackModel, false, temperature);\r\n        }\r\n      }\r\n    }\r\n    throw new Error(`Gemini error ${res.status}: ${errText}`);\r\n  }\r\n\r\n  const data = await res.json();\r\n\r\n  // Robust extraction: first actual text part across candidates\r\n  let textOut = '';\r\n  for (const cand of data?.candidates ?? []) {\r\n    for (const part of cand?.content?.parts ?? []) {\r\n      if ((part as any)?.text) { textOut = String((part as any).text).trim(); break; }\r\n    }\r\n    if (textOut) break;\r\n  }\r\n  if (!textOut) {\r\n    const parts = data?.candidates?.[0]?.content?.parts ?? [];\r\n    textOut = parts.map((p: any) => p?.text ?? '').join('').trim();\r\n  }\r\n  console.log('Gemini text response:', textOut);\r\n\r\n  // Flash → Pro fallback if empty\r\n  if (!textOut && allowFallback && chosenModel.includes('flash')) {\r\n    const fallbackModel = chosenModel.replace('flash', 'pro');\r\n    return generateWithGemini(inputText, fallbackModel, false);\r\n  }\r\n\r\n  return textOut || '(No content returned)';\r\n}\r\n\r\nexport async function generateWithGeminiImages(inputText: string, imageDataUrls: string[], model?: string, allowFallback: boolean = true): Promise<string> {\r\n  const apiKey = import.meta.env.VITE_GEMINI_API_KEY as string | undefined;\r\n  console.log('Gemini API Key exists:', Boolean(apiKey));\r\n  console.log('Gemini API Key length:', apiKey?.length ?? 0);\r\n  const isPlaceholderKey = !!apiKey && (apiKey.includes('YOUR_API_KEY') || apiKey.includes('PLACEHOLDER') || apiKey === 'VITE_GEMINI_API_KEY');\r\n  if (!apiKey || isPlaceholderKey) {\r\n    console.warn('Gemini API key missing or placeholder; using generic fallback');\r\n    if (allowFallback) {\r\n      const generic = inputText + ' — photorealistic, soft studio lighting, shallow depth of field, 50mm lens, balanced composition, high detail.';\r\n      return generic.trim();\r\n    }\r\n    throw new Error('Missing or placeholder VITE_GEMINI_API_KEY');\r\n  }\r\n\r\n  const chosenModel = model || (import.meta.env.VITE_GEMINI_MODEL_IMAGE as string | undefined) || 'gemini-2.5-flash';\r\n  console.log('Gemini images: Using model:', chosenModel);\r\n  console.log('Gemini images: Input text length:', inputText?.length ?? 0);\r\n  console.log('Gemini images: Image count:', imageDataUrls.length);\r\n  const url = `https://generativelanguage.googleapis.com/v1/models/${chosenModel}:generateContent?key=${apiKey}`;\r\n\r\n  const parts: any[] = [{ text: inputText }];\r\n  // Add validation\r\n  for (const dataUrl of imageDataUrls) {\r\n    if (!dataUrl || typeof dataUrl !== 'string') {\r\n      console.warn('Invalid image data URL, skipping');\r\n      continue;\r\n    }\r\n\r\n    const match = dataUrl.match(/^data:([^;]+);base64,(.+)$/);\r\n    if (!match) {\r\n      console.warn('Invalid data URL format, skipping');\r\n      continue;\r\n    }\r\n\r\n    const mime = match[1];\r\n    const b64 = match[2];\r\n    parts.push({ inline_data: { mime_type: mime, data: b64 } });\r\n  }\r\n  console.log('Gemini images: Parts to send:', parts.length);\r\n  const firstImg = parts.find((p: any) => p?.inline_data);\r\n  if (firstImg) {\r\n    console.log('Gemini images: First image MIME:', firstImg.inline_data?.mime_type, 'Base64 length:', firstImg.inline_data?.data?.length);\r\n  }\r\n\r\n  const body = {\r\n    contents: [{ role: 'user', parts }]\r\n  };\r\n\r\n  const res = await fetch(url, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(body)\r\n  });\r\n\r\n  // Enhanced error-aware fallback: if access/not-found, try 2.5→1.5 and flash→pro\r\n  if (!res.ok) {\r\n    const errText = await res.text();\r\n    console.error('Gemini (images) error:', res.status, errText);\r\n    if (/API key not valid/i.test(errText) || /INVALID_ARGUMENT/i.test(errText)) {\r\n      if (allowFallback) {\r\n        console.warn('Gemini API key invalid; returning generic fallback');\r\n        const generic = inputText + ' — photorealistic, soft studio lighting, shallow depth of field, 50mm lens, balanced composition, high detail.';\r\n        return generic.trim();\r\n      }\r\n      throw new Error('Gemini API key is invalid or not configured.');\r\n    }\r\n    if (allowFallback) {\r\n      const isAccessOrNotFound = res.status === 403 || res.status === 404 || /permission|access|not\\s*found|unsupported|model/i.test(errText);\r\n      if (isAccessOrNotFound) {\r\n        let fallbackModel = chosenModel;\r\n        if (fallbackModel.includes('2.5')) fallbackModel = fallbackModel.replace('2.5', '1.5');\r\n        if (fallbackModel.includes('flash')) fallbackModel = fallbackModel.replace('flash', 'pro');\r\n        if (fallbackModel !== chosenModel) {\r\n          return generateWithGeminiImages(inputText, imageDataUrls, fallbackModel, false);\r\n        }\r\n      }\r\n    }\r\n    throw new Error(`Gemini (images) error ${res.status}: ${errText}`);\r\n  }\r\n\r\n  const data = await res.json();\r\n\r\n  // Robust extraction: first actual text part across candidates\r\n  let textOut = '';\r\n  for (const cand of data?.candidates ?? []) {\r\n    for (const part of cand?.content?.parts ?? []) {\r\n      if ((part as any)?.text) { textOut = String((part as any).text).trim(); break; }\r\n    }\r\n    if (textOut) break;\r\n  }\r\n  if (!textOut) {\r\n    const outParts = data?.candidates?.[0]?.content?.parts ?? [];\r\n    textOut = outParts.map((p: any) => p?.text ?? '').join('').trim();\r\n  }\r\n  console.log('Gemini images response:', textOut);\r\n\r\n  // Flash → Pro fallback if empty\r\n  if (!textOut && allowFallback && chosenModel.includes('flash')) {\r\n    const fallbackModel = chosenModel.replace('flash', 'pro');\r\n    return generateWithGeminiImages(inputText, imageDataUrls, fallbackModel, false);\r\n  }\r\n\r\n  return textOut || '(No content returned)';\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\services\\promptToText.ts","messages":[{"ruleId":"prefer-const","severity":2,"message":"'resultText' is never reassigned. Use 'const' instead.","line":58,"column":9,"nodeType":"Identifier","messageId":"useConst","endLine":58,"endColumn":19,"fix":{"range":[1941,1970],"text":"const resultText = result.text;"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2946,2949],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2946,2949],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import { PromptToTextInput, PromptToTextResponse } from '../types/api';\nimport { config } from '../config';\nimport { logger } from '../logger';\nimport { getPrimaryModel, getFallbackModel } from '../model-resolver';\nimport { callGemini } from './geminiClient';\nimport { getPromptRefineSystemPrompt, getPromptEvaluateSystemPrompt, getPromptSimplifySystemPrompt } from '../prompts';\nimport { metricsStore } from '../metrics';\nimport { randomUUID } from 'crypto';\n\nexport async function promptToText(\n  input: PromptToTextInput,\n  headers: Record<string, string>\n): Promise<PromptToTextResponse> {\n  const traceId = randomUUID();\n  const startTime = Date.now();\n  \n  const mode = headers['x-analyze-mode'] as 'fast' | 'quality' || input.mode || 'fast';\n  const model = mode === 'fast' ? getPrimaryModel() : getFallbackModel();\n  const timeout = mode === 'fast' ? config.timeoutMsFast : config.timeoutMsQuality;\n\n  let systemPrompt: string;\n  let userPrompt: string;\n\n  switch (input.task) {\n    case 'refine':\n      systemPrompt = getPromptRefineSystemPrompt();\n      userPrompt = `Prompt to refine: ${input.prompt}`;\n      if (input.target_length) {\n        userPrompt += `\\nTarget length: approximately ${input.target_length} characters`;\n      }\n      break;\n    \n    case 'evaluate':\n      systemPrompt = getPromptEvaluateSystemPrompt();\n      userPrompt = `Prompt to evaluate: ${input.prompt}`;\n      break;\n    \n    case 'simplify':\n      systemPrompt = getPromptSimplifySystemPrompt();\n      userPrompt = `Prompt to simplify: ${input.prompt}`;\n      if (input.target_length) {\n        userPrompt += `\\nTarget length: approximately ${input.target_length} characters`;\n      }\n      break;\n  }\n\n  const fullPrompt = `${systemPrompt}\\n\\n${userPrompt}`;\n\n  try {\n    const result = await callGemini({\n      model,\n      prompt: fullPrompt,\n      timeout,\n    });\n\n    let score = 0.8; // Default score\n    let suggestions: string[] = [];\n    let resultText = result.text;\n\n    // Parse evaluation response\n    if (input.task === 'evaluate') {\n      const scoreMatch = result.text.match(/score:?\\s*(0?\\.\\d+|1\\.0)/i);\n      if (scoreMatch) {\n        score = parseFloat(scoreMatch[1]);\n      }\n\n      const suggestionLines = result.text\n        .split('\\n')\n        .filter(line => line.trim().startsWith('-') || line.trim().startsWith('•'))\n        .map(line => line.replace(/^[-•]\\s*/, '').trim());\n      \n      suggestions = suggestionLines.slice(0, 5);\n    }\n\n    const latency = Date.now() - startTime;\n\n    metricsStore.addRequest({\n      trace_id: traceId,\n      endpoint: '/prompt-to-text',\n      mode,\n      chosen_model: model,\n      used_model: model,\n      fallback_used: false,\n      shadow_ran: false,\n      latency_ms: latency,\n    });\n\n    logger.info({ trace_id: traceId, model, latency, task: input.task }, 'Prompt-to-text complete');\n\n    return {\n      result: resultText,\n      score,\n      suggestions,\n    };\n  } catch (error: any) {\n    const latency = Date.now() - startTime;\n    \n    metricsStore.addRequest({\n      trace_id: traceId,\n      endpoint: '/prompt-to-text',\n      mode,\n      chosen_model: model,\n      fallback_used: false,\n      shadow_ran: false,\n      latency_ms: latency,\n      error: error.message,\n    });\n\n    logger.error({ trace_id: traceId, error: error.message }, 'Prompt-to-text failed');\n    throw error;\n  }\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\services\\replicate.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'prompt' is assigned a value but never used.","line":158,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":158,"endColumn":11}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Replicate from 'replicate';\n\n// Initialize Replicate client\nconst replicate = new Replicate({\n  auth: import.meta.env.VITE_REPLICATE_API_TOKEN,\n});\n\nexport interface AnalyzeImageOptions {\n  detail?: 'short' | 'medium' | 'detailed';\n  tags?: boolean;\n}\n\nexport interface AnalyzeImageResult {\n  description: string;\n  tags?: string[];\n}\n\n/**\n * Convert file to base64 data URL\n */\nasync function fileToBase64(file: File): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result as string);\n    reader.onerror = reject;\n    reader.readAsDataURL(file);\n  });\n}\n\n/**\n * Upload image to a temporary hosting service for Replicate\n * For now, we'll convert to base64 and use data URLs\n */\nasync function prepareImageForReplicate(file: File): Promise<string> {\n  // Convert file to base64 data URL\n  const dataUrl = await fileToBase64(file);\n  return dataUrl;\n}\n\n/**\n * Analyze an image using Replicate's img2prompt model\n */\nexport async function analyzeImage(\n  imageFile: File,\n  options: AnalyzeImageOptions = {}\n): Promise<AnalyzeImageResult> {\n  console.log('🔍 Replicate analyzeImage called with:', { \n    fileName: imageFile.name, \n    size: imageFile.size, \n    options \n  });\n  \n  const apiToken = import.meta.env.VITE_REPLICATE_API_TOKEN;\n  if (!apiToken) {\n    console.error('❌ No Replicate API token found!');\n    throw new Error('Replicate API token not configured. Please set VITE_REPLICATE_API_TOKEN in your .env file');\n  }\n\n  try {\n    // Prepare image for Replicate\n    console.log('📄 Converting image for Replicate...');\n    const imageData = await prepareImageForReplicate(imageFile);\n    console.log('✅ Image conversion complete');\n\n    // Run the img2prompt model\n    console.log('🚀 Calling Replicate img2prompt model...');\n    const output = await replicate.run(\n      \"methexis-inc/img2prompt:50adaf2d3ad20a6f911a8a9e3ccf777b263b8596fbd2c8fc26e8888f8a0edbb5\",\n      {\n        input: {\n          image: imageData,\n        },\n      }\n    ) as string;\n\n    console.log('✅ Replicate API call completed');\n    console.log('📝 Generated prompt:', output);\n\n    // Process the output based on options\n    let description = output;\n    let tags: string[] | undefined;\n\n    // If tags are requested, try to extract them from the description\n    if (options.tags) {\n      // Simple tag extraction - look for comma-separated terms\n      const tagMatches = description.match(/\\b\\w+(?:\\s+\\w+)*\\b/g);\n      if (tagMatches) {\n        tags = tagMatches.slice(0, 10); // Limit to 10 tags\n      }\n    }\n\n    // Adjust description length based on detail level\n    if (options.detail === 'short') {\n      // Truncate to first sentence or 100 characters\n      const firstSentence = description.split('.')[0];\n      description = firstSentence.length > 100 \n        ? description.substring(0, 100) + '...'\n        : firstSentence + '.';\n    } else if (options.detail === 'detailed') {\n      // Keep full description as is\n      description = output;\n    }\n\n    const result: AnalyzeImageResult = {\n      description,\n      ...(tags && { tags })\n    };\n\n    console.log('🎯 Final analysis result:', result);\n    return result;\n\n  } catch (error) {\n    console.error('❌ Replicate image analysis failed:', error);\n    \n    // Provide more specific error messages\n    if (error instanceof Error) {\n      if (error.message.includes('authentication') || error.message.includes('401')) {\n        throw new Error('Replicate API authentication failed. Please check your VITE_REPLICATE_API_TOKEN.');\n      } else if (error.message.includes('quota') || error.message.includes('429')) {\n        throw new Error('Replicate API quota exceeded. Please try again later.');\n      } else if (error.message.includes('network') || error.message.includes('fetch')) {\n        throw new Error('Network error connecting to Replicate API. Please check your internet connection.');\n      }\n    }\n    \n    throw new Error(`Image analysis failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n/**\n * Generate enhanced prompts using text-to-prompt (keeping existing functionality)\n */\nexport async function textToPrompt(\n  intent: string,\n  style?: string,\n  constraints?: string\n): Promise<string> {\n  console.log('📝 Replicate textToPrompt called with:', { intent, style, constraints });\n  \n  const apiToken = import.meta.env.VITE_REPLICATE_API_TOKEN;\n  if (!apiToken) {\n    console.error('❌ No Replicate API token found!');\n    throw new Error('Replicate API token not configured');\n  }\n\n  try {\n    // Construct a prompt for text enhancement\n    let prompt = `Enhance this image generation prompt: \"${intent}\"`;\n    \n    if (style) {\n      prompt += ` Style: ${style}.`;\n    }\n    \n    if (constraints) {\n      prompt += ` Constraints: ${constraints}.`;\n    }\n    \n    prompt += ' Make it more detailed and specific for better image generation results.';\n\n    console.log('🚀 Calling Replicate for text enhancement...');\n    \n    // For text enhancement, we can use a different model or just return enhanced text\n    // For now, let's create a simple enhancement\n    const enhancedPrompt = await enhancePromptLocally(intent, style, constraints);\n    \n    console.log('✅ Text enhancement completed:', enhancedPrompt);\n    return enhancedPrompt;\n\n  } catch (error) {\n    console.error('❌ Text-to-prompt enhancement failed:', error);\n    throw new Error(`Text enhancement failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n/**\n * Refine an existing prompt (for compatibility with existing App.tsx)\n */\nexport async function refinePrompt(\n  existingPrompt: string,\n  mode: 'refine' | 'enhance' | 'simplify' = 'refine'\n): Promise<string> {\n  console.log('🔧 Replicate refinePrompt called with:', { existingPrompt, mode });\n  \n  try {\n    // For now, use local enhancement since we don't have a specific refine model\n    let refined = existingPrompt;\n    \n    switch (mode) {\n      case 'enhance':\n        refined = enhancePromptLocally(existingPrompt);\n        break;\n      case 'simplify':\n        // Simplify by removing redundant words and keeping core concepts\n        refined = existingPrompt\n          .replace(/,\\s*(highly detailed|professional quality|sharp focus|vibrant colors|excellent composition)/gi, '')\n          .replace(/\\s+/g, ' ')\n          .trim();\n        break;\n      case 'refine':\n      default:\n        // Add some variation and enhancement\n        refined = enhancePromptLocally(existingPrompt, 'artistic', 'high quality');\n        break;\n    }\n    \n    console.log('✅ Prompt refinement completed:', refined);\n    return refined;\n    \n  } catch (error) {\n    console.error('❌ Prompt refinement failed:', error);\n    throw new Error(`Prompt refinement failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n/**\n * Local prompt enhancement function\n */\nfunction enhancePromptLocally(intent: string, style?: string, constraints?: string): string {\n  let enhanced = intent;\n  \n  // Add style information\n  if (style) {\n    enhanced += `, ${style} style`;\n  }\n  \n  // Add quality enhancers\n  enhanced += ', highly detailed, professional quality';\n  \n  // Add constraints\n  if (constraints) {\n    enhanced += `, ${constraints}`;\n  }\n  \n  // Add common quality terms\n  enhanced += ', sharp focus, vibrant colors, excellent composition';\n  \n  return enhanced;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\services\\supabasePrompt.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[851,854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[851,854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1489,1492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1489,1492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1619,1622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1619,1622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../integrations/supabase/client';\r\n\r\nexport const EDGE_FUNCTION_NAME = 'enhance-prompt';\r\n\r\nexport type EnhancePromptRequest = {\r\n  prompt?: string;\r\n  inputText?: string; // optional unified text key\r\n  images?: string[]; // base64 data URLs\r\n  imageDataUrls?: string[]; // optional unified images key\r\n  model?: string; // e.g., 'gemini-1.5-flash' or 'gemini-1.5-pro'\r\n};\r\n\r\nexport type EnhancePromptResponse = {\r\n  enhancedPrompt?: string;\r\n  output?: string;\r\n};\r\n\r\nexport async function generatePromptViaEdge(req: EnhancePromptRequest): Promise<string> {\r\n  if (!supabase) {\r\n    throw new Error('Supabase client not initialized');\r\n  }\r\n\r\n  console.log('Invoking edge function with:', req);\r\n\r\n  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY as string | undefined;\r\n\r\n  try {\r\n    const invokeOptions: any = { body: req };\r\n    if (supabaseAnonKey) {\r\n      // Include both Authorization and apikey to satisfy gateway expectations\r\n      invokeOptions.headers = {\r\n        Authorization: `Bearer ${supabaseAnonKey}`,\r\n        apikey: supabaseAnonKey,\r\n        'Content-Type': 'application/json',\r\n      };\r\n    }\r\n\r\n    const { data, error } = await supabase.functions.invoke(EDGE_FUNCTION_NAME, invokeOptions);\r\n\r\n    console.log('Edge function data:', data);\r\n    console.log('Edge function error:', error);\r\n\r\n    if (error) {\r\n      throw new Error(`Edge function error: ${JSON.stringify(error)}`);\r\n    }\r\n\r\n    if (!data || !(data as any).enhancedPrompt) {\r\n      throw new Error(`No prompt returned. Data: ${JSON.stringify(data)}`);\r\n    }\r\n\r\n    return (data as any).enhancedPrompt as string;\r\n  } catch (err) {\r\n    console.error('generatePromptViaEdge failed:', err);\r\n    throw err;\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\types\\api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":11,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1384,1387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1384,1387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\n\n// Request schemas\nexport const analyzeImageSchema = z.object({\n  imageUrl: z.string().url().startsWith('https://').optional(),\n  base64: z.string().optional(),\n  mimeType: z.enum(['image/png', 'image/jpeg', 'image/jpg', 'image/webp']).default('image/jpeg'),\n  options: z.object({\n    detail: z.enum(['short', 'medium', 'long']).default('medium'),\n    tags: z.boolean().default(false),\n  }).optional(),\n  mode: z.enum(['fast', 'quality']).default('fast'),\n}).refine(data => data.imageUrl || data.base64, {\n  message: 'Either imageUrl or base64 must be provided',\n});\n\nexport const textToPromptSchema = z.object({\n  intent: z.string().min(1),\n  style: z.string().optional(),\n  constraints: z.string().optional(),\n  length: z.enum(['minimal', 'medium', 'comprehensive']).default('medium'),\n  mode: z.enum(['fast', 'quality']).default('fast'),\n});\n\nexport const promptToTextSchema = z.object({\n  prompt: z.string().min(1),\n  task: z.enum(['refine', 'evaluate', 'simplify']),\n  target_length: z.number().int().positive().optional(),\n  mode: z.enum(['fast', 'quality']).default('fast'),\n});\n\n// Response types\nexport interface AnalyzeImageResponse {\n  caption: string;\n  objects: Array<{\n    name: string;\n    count: number;\n    approx_area?: string;\n    position?: string;\n  }>;\n  tags: string[];\n  setting: string;\n  confidence: number;\n  model: string;\n  raw: any;\n}\n\nexport interface TextToPromptResponse {\n  prompt: string;\n  variants: string[];\n  safety_notes: string[];\n}\n\nexport interface PromptToTextResponse {\n  result: string;\n  score: number;\n  suggestions: string[];\n}\n\nexport interface MetricsData {\n  total_requests: number;\n  success_count: number;\n  error_count: number;\n  success_rate: number;\n  fallback_rate: number;\n  avg_latency_ms: number;\n  avg_confidence: number;\n  ab_outcomes: {\n    flash_count: number;\n    pro_count: number;\n  };\n  shadow_comparisons: number;\n}\n\n// Internal types\nexport type AnalyzeImageInput = z.infer<typeof analyzeImageSchema>;\nexport type TextToPromptInput = z.infer<typeof textToPromptSchema>;\nexport type PromptToTextInput = z.infer<typeof promptToTextSchema>;\n\nexport type ModelTier = 'flash' | 'pro';\nexport type AnalyzeMode = 'fast' | 'quality';\n\nexport interface ModelCallResult {\n  text: string;\n  model: string;\n  latency: number;\n  confidence: number;\n}\n\nexport interface RequestContext {\n  trace_id: string;\n  endpoint: string;\n  mode: AnalyzeMode;\n  chosen_model: string;\n  used_model?: string;\n  fallback_used: boolean;\n  shadow_ran: boolean;\n  latency_ms: number;\n  confidence?: number;\n  error?: string;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\types\\gemini.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"C:\\PromptsGenie\\src\\workers\\imageProcessor.ts","messages":[{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":57,"column":3,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":111,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Image processing Web Worker to prevent UI blocking\r\nexport interface ImageProcessingMessage {\r\n  type: 'PROCESS_IMAGE';\r\n  file: File;\r\n  maxDimension: number;\r\n  quality: number;\r\n  id: string;\r\n}\r\n\r\nexport interface ImageProcessingResult {\r\n  type: 'IMAGE_PROCESSED';\r\n  dataUrl: string;\r\n  id: string;\r\n  error?: string;\r\n}\r\n\r\nexport interface ProgressMessage {\r\n  type: 'PROGRESS';\r\n  id: string;\r\n  progress: number;\r\n}\r\n\r\n// Handle messages from main thread\r\nself.onmessage = async (event: MessageEvent<ImageProcessingMessage>) => {\r\n  const { type, file, maxDimension, quality, id } = event.data;\r\n  \r\n  if (type === 'PROCESS_IMAGE') {\r\n    try {\r\n      // Send progress update\r\n      self.postMessage({ type: 'PROGRESS', id, progress: 10 } as ProgressMessage);\r\n      \r\n      const dataUrl = await processImageInWorker(file, maxDimension, quality, id);\r\n      \r\n      // Send completion\r\n      self.postMessage({\r\n        type: 'IMAGE_PROCESSED',\r\n        dataUrl,\r\n        id\r\n      } as ImageProcessingResult);\r\n    } catch (error) {\r\n      self.postMessage({\r\n        type: 'IMAGE_PROCESSED',\r\n        dataUrl: '',\r\n        id,\r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      } as ImageProcessingResult);\r\n    }\r\n  }\r\n};\r\n\r\nasync function processImageInWorker(\r\n  file: File, \r\n  maxDimension: number, \r\n  quality: number,\r\n  id: string\r\n): Promise<string> {\r\n  try {\r\n    // Send progress update\r\n    self.postMessage({ type: 'PROGRESS', id, progress: 10 } as ProgressMessage);\r\n    \r\n    // Use createImageBitmap which is available in Web Workers\r\n    const imageBitmap = await createImageBitmap(file);\r\n    \r\n    // Send progress update\r\n    self.postMessage({ type: 'PROGRESS', id, progress: 30 } as ProgressMessage);\r\n    \r\n    // Calculate new dimensions\r\n    let { width, height } = imageBitmap;\r\n    if (width > maxDimension || height > maxDimension) {\r\n      const ratio = Math.min(maxDimension / width, maxDimension / height);\r\n      width = Math.round(width * ratio);\r\n      height = Math.round(height * ratio);\r\n    }\r\n    \r\n    // Create OffscreenCanvas for better performance\r\n    const canvas = new OffscreenCanvas(width, height);\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    if (!ctx) {\r\n      throw new Error('Failed to get canvas context');\r\n    }\r\n    \r\n    // Send progress update\r\n    self.postMessage({ type: 'PROGRESS', id, progress: 60 } as ProgressMessage);\r\n    \r\n    // Draw and compress\r\n    ctx.drawImage(imageBitmap, 0, 0, width, height);\r\n    \r\n    // Clean up the ImageBitmap\r\n    imageBitmap.close();\r\n    \r\n    // Send progress update\r\n    self.postMessage({ type: 'PROGRESS', id, progress: 80 } as ProgressMessage);\r\n    \r\n    // Convert to blob and then to data URL\r\n    const blob = await canvas.convertToBlob({ type: 'image/jpeg', quality });\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        // Send final progress\r\n        self.postMessage({ type: 'PROGRESS', id, progress: 100 } as ProgressMessage);\r\n        resolve(reader.result as string);\r\n      };\r\n      reader.onerror = () => reject(new Error('Failed to convert blob to data URL'));\r\n      reader.readAsDataURL(blob);\r\n    });\r\n    \r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]