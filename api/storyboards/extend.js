export default async function handler(req, res) {
  // Enable CORS
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
  res.setHeader(
    'Access-Control-Allow-Headers',
    'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version'
  );

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { storyboardId, extraFrames, currentFrames } = req.body;

    if (!storyboardId || !Array.isArray(extraFrames) || extraFrames.length === 0 || !Array.isArray(currentFrames)) {
      return res.status(400).json({
        error: 'Invalid extend request. Must include storyboardId, extraFrames array, and currentFrames array.'
      });
    }

    // Generate new frame objects
    const newFrames = extraFrames.map((frame, i) => ({
      id: `frame_${currentFrames.length + i + 1}`,
      title: `Scene ${currentFrames.length + i + 1}`,
      description: frame.description || `Frame ${currentFrames.length + i + 1}`,
      image_url: null // Will be generated by client calling generate-frame
    }));

    // Return extended storyboard
    res.status(200).json({
      storyboardId,
      frames: [...currentFrames, ...newFrames]
    });
  } catch (error) {
    console.error('Storyboard extension failed:', error);
    res.status(500).json({ error: error.message });
  }
}
